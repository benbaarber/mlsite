(()=>{"use strict";var e={n:n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},d:(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n)};const n=require("express");var t=e.n(n);const r=require("body-parser");var s=e.n(r);const i=require("dotenv");var o=e.n(i);const a=require("cors");var u=e.n(a);const c=require("mongoose");var l=e.n(c);const d=require("path");var p=e.n(d);const v=require("mongoose-lean-virtuals");var f=function(e,n,t,r){return new(t||(t=Promise))((function(s,i){function o(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var n;e.done?s(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(o,a)}u((r=r.apply(e,n||[])).next())}))},h=function(e,n){var t,r,s,i,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(u){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(o=0)),o;)try{if(t=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=n.call(e,o)}catch(e){a=[6,e],r=0}finally{t=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},y=function(e,n,t){if(t||2===arguments.length)for(var r,s=0,i=n.length;s<i;s++)!r&&s in n||(r||(r=Array.prototype.slice.call(n,0,s)),r[s]=n[s]);return e.concat(r||Array.prototype.slice.call(n))};l().plugin(v.mongooseLeanVirtuals);var b=new c.Schema({player:{type:String,required:!0},level:{type:String,required:!0},hertz:{type:Number,required:!0},link:{type:String,required:!0},playerID:{type:c.Schema.Types.ObjectId,ref:"Player"},levelID:{type:c.Schema.Types.ObjectId,ref:"Level"}},{statics:{playerNameUpdate:function(e,n,t){return f(this,void 0,void 0,(function(){return h(this,(function(r){switch(r.label){case 0:return[4,this.updateMany({playerID:n},{$set:{player:t}}).session(e)];case 1:return r.sent(),[2]}}))}))},levelNameUpdate:function(e,n,t){return f(this,void 0,void 0,(function(){return h(this,(function(r){switch(r.label){case 0:return[4,this.updateMany({levelID:n},{$set:{level:t}}).session(e)];case 1:return r.sent(),[2]}}))}))}},methods:{cascadingDelete:function(e,n){return f(this,void 0,void 0,(function(){var t,r;return h(this,(function(s){switch(s.label){case 0:return[4,_.findByIdAndUpdate(this.levelID,{$pull:{records:this._id}}).session(e)];case 1:return t=s.sent(),[4,S.findByIdAndUpdate(this.playerID,{$pull:{records:this._id},$inc:(r={},r["points.".concat(this.hertz<=60?"lrr":"hrr")]=1===n?-(null==t?void 0:t.points):0,r["points.comb"]=1===n?-(null==t?void 0:t.points):0,r)}).session(e)];case 2:return s.sent(),[4,this.deleteOne({session:e})];case 3:return s.sent(),[2]}}))}))}}});b.pre("save",(function(){return f(this,void 0,void 0,(function(){var e,n,t,r;return h(this,(function(s){switch(s.label){case 0:return e=this.$session(),[4,_.findOneAndUpdate({name:this.level},{$addToSet:{records:this._id}},{new:!0}).session(e)];case 1:if(null===(n=s.sent()))throw new Error("Level not found");return[4,S.findOneAndUpdate({name:this.player},{$addToSet:{records:this._id},$inc:(r={},r["points.".concat(this.hertz<=60?"lrr":"hrr")]=n.points,r["points.comb"]=n.points,r)},{new:!0}).session(e)];case 2:if(null===(t=s.sent()))throw new Error("Player not found");return this.playerID=t._id,this.levelID=n._id,[2]}}))}))}));var m,w=new c.Schema({name:{type:String,required:!0},creator:{type:String,required:!0},position:{type:Number,required:!0},records:[{type:c.Schema.Types.ObjectId,ref:"Record"}]},{minimize:!1,toJSON:{virtuals:!0},toObject:{virtuals:!0},virtuals:{points:{get:function(){return this.position<=100?2250/(.37*this.position+9)-40.12:0}}},statics:{levelPoints:function(){return f(this,void 0,void 0,(function(){var e;return h(this,(function(n){switch(n.label){case 0:return[4,this.find({position:{$lte:100}})];case 1:return e=n.sent(),[2,Object.assign.apply(Object,y([{}],e.map((function(e){var n;return(n={})[e._id.toString()]=e.points,n})),!1))]}}))}))}},methods:{add:function(e){return f(this,void 0,void 0,(function(){return h(this,(function(n){switch(n.label){case 0:return[4,_.updateMany({position:{$gte:this.position}},{$inc:{position:1}}).session(e)];case 1:return n.sent(),this.$session(e),[4,S.updateAllPoints(e)];case 2:return n.sent(),[4,this.save()];case 3:return n.sent(),[2]}}))}))},del:function(e){return f(this,void 0,void 0,(function(){var n,t;return h(this,(function(r){switch(r.label){case 0:return[4,_.updateMany({position:{$gt:this.position}},{$inc:{position:-1}}).session(e)];case 1:return r.sent(),[4,this.populate("records")];case 2:r.sent(),n=0,t=this.records,r.label=3;case 3:return n<t.length?[4,t[n].cascadingDelete(e)]:[3,6];case 4:r.sent(),r.label=5;case 5:return n++,[3,3];case 6:return[4,this.deleteOne({session:e})];case 7:return r.sent(),[4,S.updateAllPoints(e)];case 8:return r.sent(),[2]}}))}))},move:function(e,n){return f(this,void 0,void 0,(function(){return h(this,(function(t){switch(t.label){case 0:return this.position>n?[4,_.updateMany({$and:[{position:{$gte:n}},{position:{$lt:this.position}}]},{$inc:{position:1}}).session(e)]:[3,2];case 1:return t.sent(),[3,4];case 2:return this.position<n?[4,_.updateMany({$and:[{position:{$lte:n}},{position:{$gt:this.position}}]},{$inc:{position:-1}}).session(e)]:[3,4];case 3:t.sent(),t.label=4;case 4:return[4,_.findByIdAndUpdate(this._id,{$set:{position:n}}).session(e)];case 5:return t.sent(),[4,S.updateAllPoints(e)];case 6:return t.sent(),[2]}}))}))}}}),g=new c.Schema({name:{type:String,required:!0},points:{lrr:{type:Number,required:!0,default:0},hrr:{type:Number,required:!0,default:0},comb:{type:Number,required:!0,default:0}},discord:{type:String,required:!1},records:[{type:c.Schema.Types.ObjectId,ref:"Record"}]},{minimize:!1,toJSON:{virtuals:!0},toObject:{virtuals:!0},virtuals:{hertz:{get:function(){for(var e={},n=0,t=this.records;n<t.length;n++){var r=t[n];e[r.hertz]=(e[r.hertz]||0)+1}return e}},mclass:{get:function(){var e,n,t,r=this,s=[[1,"Legacy"],[50,"Class D"],[150,"Class C"],[300,"Class B"],[600,"Class A"],[1e3,"Class S"],[2e4,"Overlords"]];return{lrr:(null!==(e=s.find((function(e){return r.points.lrr<e[0]})))&&void 0!==e?e:s[0])[1],hrr:(null!==(n=s.find((function(e){return r.points.hrr<e[0]})))&&void 0!==n?n:s[0])[1],comb:(null!==(t=s.find((function(e){return r.points.comb<e[0]})))&&void 0!==t?t:s[0])[1]}}}},statics:{updateAllPoints:function(e){return f(this,void 0,void 0,(function(){var n,t,r,s,i,o,a,u,c;return h(this,(function(l){switch(l.label){case 0:return[4,_.find({position:{$lte:100}},{},{session:e})];case 1:return n=l.sent(),t=Object.assign.apply(Object,y([{}],n.map((function(e){var n;return(n={})[e.id]=e.points,n})),!1)),[4,this.find({},{},{session:e})];case 2:r=l.sent(),s=0,i=r,l.label=3;case 3:return s<i.length?[4,(o=i[s]).getCompletedLevels()]:[3,7];case 4:return a=l.sent(),u=a.lrr.map((function(e){var n;return null!==(n=t[e.id])&&void 0!==n?n:0})).reduce((function(e,n){return e+n}),0),c=a.hrr.map((function(e){var n;return null!==(n=t[e.id])&&void 0!==n?n:0})).reduce((function(e,n){return e+n}),0),o.points={lrr:u,hrr:c,comb:u+c},o.$session(e),[4,o.save()];case 5:l.sent(),l.label=6;case 6:return s++,[3,3];case 7:return[2]}}))}))}},methods:{getCompletedLevels:function(){return f(this,void 0,void 0,(function(){var e,n,t,r,s;return h(this,(function(i){switch(i.label){case 0:return[4,this.populate("records","levelID hertz")];case 1:i.sent(),e={lrr:[],hrr:[]},n=0,t=this.records,i.label=2;case 2:return n<t.length?(r=t[n],[4,_.findById(r.levelID)]):[3,5];case 3:(s=i.sent())&&(r.hertz<=60?e.lrr:e.hrr).push(s),i.label=4;case 4:return n++,[3,2];case 5:return[2,e]}}))}))},updatePoints:function(e){return f(this,void 0,void 0,(function(){var n,t,r;return h(this,(function(s){switch(s.label){case 0:return[4,this.getCompletedLevels()];case 1:return n=s.sent(),t=n.lrr.map((function(e){return e.points})).reduce((function(e,n){return e+n}),0),r=n.hrr.map((function(e){return e.points})).reduce((function(e,n){return e+n}),0),this.points={lrr:t,hrr:r,comb:t+r},this.$session(e),[4,this.save()];case 2:return s.sent(),[2]}}))}))},ban:function(e){return f(this,void 0,void 0,(function(){var n,t;return h(this,(function(r){switch(r.label){case 0:return[4,this.populate("records")];case 1:r.sent(),n=0,t=this.records,r.label=2;case 2:return n<t.length?[4,t[n].cascadingDelete(e)]:[3,5];case 3:r.sent(),r.label=4;case 4:return n++,[3,2];case 5:return[4,this.deleteOne({session:e})];case 6:return r.sent(),[2]}}))}))}}}),O=(0,c.model)("Record",b),_=(0,c.model)("Level",w),S=(0,c.model)("Player",g),$=function(){return $=Object.assign||function(e){for(var n,t=1,r=arguments.length;t<r;t++)for(var s in n=arguments[t])Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s]);return e},$.apply(this,arguments)},I=function(e,n,t,r){return new(t||(t=Promise))((function(s,i){function o(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var n;e.done?s(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(o,a)}u((r=r.apply(e,n||[])).next())}))},T=function(e,n){var t,r,s,i,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(u){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(o=0)),o;)try{if(t=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=n.call(e,o)}catch(e){a=[6,e],r=0}finally{t=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}};void 0!==process.env.BOT_TOKEN&&void 0!==process.env.MONGODB_TEST_URI||o().config();var j=t()(),x=null!==(m=process.env.PORT)&&void 0!==m?m:3e3;j.set("query parser","simple"),j.use(s().urlencoded({extended:!0})),j.use(s().json()),j.use(u()()),j.use("/",t().static(p().resolve(__dirname,"../client")));var D=function(e,n,t){var r;if(!(null!==(r=e.headers.auth)&&void 0!==r?r:""===process.env.BOT_TOKEN))return n.sendStatus(403);t()},q=function(e){return function(n,t){return I(void 0,void 0,void 0,(function(){var r,s,i,o,a;return T(this,(function(u){switch(u.label){case 0:return[4,l().startSession()];case 1:r=u.sent(),u.label=2;case 2:return u.trys.push([2,5,7,9]),r.startTransaction(),o=(i=t).sendStatus,[4,e(n,t,r)];case 3:return s=o.apply(i,[u.sent()]),[4,r.commitTransaction()];case 4:return u.sent(),[3,9];case 5:return a=u.sent(),[4,r.abortTransaction()];case 6:return u.sent(),s="number"==typeof a?t.sendStatus(a):console.log(a),[3,9];case 7:return[4,r.endSession()];case 8:return u.sent(),[2,s];case 9:return[2]}}))}))}};j.get("/levels",(function(e,n){return I(void 0,void 0,void 0,(function(){var e;return T(this,(function(t){switch(t.label){case 0:return[4,_.find({position:{$lte:100}}).lean({virtuals:!0}).sort("position").select("-_id -__v -records")];case 1:return e=t.sent(),[2,n.status(200).json(e)]}}))}))})),j.get("/levels/:name",(function(e,n){return I(void 0,void 0,void 0,(function(){var t;return T(this,(function(r){switch(r.label){case 0:return[4,_.findOne({name:e.params.name}).lean({virtuals:!0}).populate("records","-_id -__v -level -levelID -playerID").select("-_id -__v")];case 1:return[2,(t=r.sent())?n.status(200).json(t):n.status(404).send("Level not found.")]}}))}))})),j.post("/levels",D,q((function(e,n,t){return I(void 0,void 0,void 0,(function(){return T(this,(function(n){switch(n.label){case 0:return[4,_.exists({name:e.body.name})];case 1:if(n.sent())throw 409;return[4,new _({name:e.body.name,creator:e.body.creator,position:e.body.position}).add(t)];case 2:return n.sent(),[2,201]}}))}))}))),j.delete("/levels/:name",D,q((function(e,n,t){return I(void 0,void 0,void 0,(function(){var n;return T(this,(function(r){switch(r.label){case 0:return[4,_.findOne({name:e.params.name})];case 1:if(null===(n=r.sent()))throw 404;return[4,n.del(t)];case 2:return r.sent(),[2,200]}}))}))}))),j.patch("/levels/:name",D,q((function(e,n,t){return I(void 0,void 0,void 0,(function(){var n;return T(this,(function(r){switch(r.label){case 0:return void 0===e.body.newpos?[3,3]:[4,_.findOne({name:e.params.name})];case 1:if(null===(n=r.sent()))throw 404;return[4,n.move(t,e.body.newpos)];case 2:case 5:return r.sent(),[2,200];case 3:return void 0===e.body.newname?[3,6]:[4,_.findOneAndUpdate({name:e.params.name},{$set:{name:e.body.newname}}).session(t)];case 4:if(null===(n=r.sent()))throw 404;return[4,O.levelNameUpdate(t,n._id,e.body.newname)];case 6:return void 0===e.body.newcreator?[3,8]:[4,_.findOneAndUpdate({name:e.params.name},{$set:{creator:e.body.newcreator}}).session(t)];case 7:if(null===(n=r.sent()))throw 404;return[2,200];case 8:throw 400}}))}))}))),j.get("/players",(function(e,n){return I(void 0,void 0,void 0,(function(){var e;return T(this,(function(t){switch(t.label){case 0:return[4,S.find({"points.comb":{$gt:0}}).lean().sort("-points.lrr").select("name points -_id")];case 1:return e=t.sent(),[2,n.status(200).json(e)]}}))}))})),j.get("/players/:name",(function(e,n){return I(void 0,void 0,void 0,(function(){var t;return T(this,(function(r){switch(r.label){case 0:return[4,S.findOne({name:e.params.name}).lean({virtuals:!0}).populate("records","-_id -id -__v -player -levelID -playerID").select("-_id -id -__v")];case 1:return[2,(t=r.sent())?n.status(200).json(t):n.status(404).send("Player not found.")]}}))}))})),j.post("/players",D,q((function(e,n,t){return I(void 0,void 0,void 0,(function(){var n;return T(this,(function(r){switch(r.label){case 0:return[4,S.exists({name:e.body.name})];case 1:if(r.sent())throw 409;return(n=new S({name:e.body.name,discord:null===e.body.discord?void 0:e.body.discord})).$session(t),[4,n.save()];case 2:return r.sent(),[2,201]}}))}))}))),j.delete("/players/:name",D,q((function(e,n,t){return I(void 0,void 0,void 0,(function(){var n;return T(this,(function(r){switch(r.label){case 0:return[4,S.findOne({name:e.params.name})];case 1:if(null===(n=r.sent()))throw 404;return[4,n.ban(t)];case 2:return r.sent(),[2,200]}}))}))}))),j.patch("/players/:name",D,q((function(e,n,t){return I(void 0,void 0,void 0,(function(){var n;return T(this,(function(r){switch(r.label){case 0:return void 0===e.body.newname?[3,3]:[4,S.findOneAndUpdate({name:e.params.name},{$set:{name:e.body.newname}}).session(t)];case 1:if(null===(n=r.sent()))throw 404;return[4,O.playerNameUpdate(t,n._id,e.body.newname)];case 2:return r.sent(),[2,200];case 3:return void 0===e.body.newdiscord?[3,5]:[4,S.findOneAndUpdate({name:e.params.name},{$set:{discord:e.body.newdiscord}}).session(t)];case 4:if(null===(n=r.sent()))throw 404;return[2,200];case 5:throw 400}}))}))}))),j.post("/records",D,q((function(e,n,t){return I(void 0,void 0,void 0,(function(){var n,r;return T(this,(function(s){switch(s.label){case 0:return[4,S.exists({name:e.body.player})];case 1:return(n=!s.sent())?[3,3]:[4,_.exists({name:e.body.level})];case 2:n=!s.sent(),s.label=3;case 3:if(n)throw 404;if(void 0===e.body.hertz||void 0===e.body.link)throw 400;return[4,O.exists({player:e.body.player,level:e.body.level})];case 4:if(s.sent())throw 409;return(r=new O({player:e.body.player,level:e.body.level,hertz:e.body.hertz,link:e.body.link})).$session(t),[4,r.save()];case 5:return s.sent(),[2,201]}}))}))}))),j.delete("/records",D,q((function(e,n,t){return I(void 0,void 0,void 0,(function(){var n;return T(this,(function(r){switch(r.label){case 0:if(void 0===e.body.player||void 0===e.body.level)throw 400;return[4,O.findOne({player:e.body.player,level:e.body.level})];case 1:if(null===(n=r.sent()))throw 404;return[4,n.cascadingDelete(t,1)];case 2:return r.sent(),[2,200]}}))}))}))),j.post("/submit",(function(e,n){return I(void 0,void 0,void 0,(function(){var t;return T(this,(function(r){switch(r.label){case 0:return t=0,[4,O.exists({player:e.body.player,level:e.body.level})];case 1:return r.sent()?[2,n.sendStatus(409)]:[4,S.exists({name:e.body.player})];case 2:return r.sent()||(t+=1),[4,_.exists({name:e.body.level})];case 3:return r.sent()||(t+=2),[2,fetch("".concat(process.env.BOT_LISTENER_URI,"/submit"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify($($({},e.body),{isNew:t}))}).then((function(e){return n.sendStatus(e.status)})).catch((function(){return n.sendStatus(503)}))]}}))}))})),j.get("/members",(function(e,n){return I(void 0,void 0,void 0,(function(){var e;return T(this,(function(t){switch(t.label){case 0:return[4,S.find({discord:{$exists:!0}}).lean().sort("-points.comb").select("name discord points.comb -_id")];case 1:return e=t.sent(),[2,n.status(200).json(e)]}}))}))}));try{l().connect(process.env.MONGODB_URI)}catch(e){console.error(e)}j.listen(x,(function(){console.log("App listening at http://localhost:".concat(x))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QXFDM0gsT0FBT3dHLEdBQzVELEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tbHNpdGUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbWxzaXRlL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL21sc2l0ZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vbWxzaXRlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbWxzaXRlL2V4dGVybmFsIGNvbW1vbmpzIFwiZXhwcmVzc1wiIiwid2VicGFjazovL21sc2l0ZS9leHRlcm5hbCBjb21tb25qcyBcImJvZHktcGFyc2VyXCIiLCJ3ZWJwYWNrOi8vbWxzaXRlL2V4dGVybmFsIGNvbW1vbmpzIFwiZG90ZW52XCIiLCJ3ZWJwYWNrOi8vbWxzaXRlL2V4dGVybmFsIGNvbW1vbmpzIFwiY29yc1wiIiwid2VicGFjazovL21sc2l0ZS9leHRlcm5hbCBjb21tb25qcyBcIm1vbmdvb3NlXCIiLCJ3ZWJwYWNrOi8vbWxzaXRlL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJwYXRoXCIiLCJ3ZWJwYWNrOi8vbWxzaXRlL2V4dGVybmFsIGNvbW1vbmpzIFwibW9uZ29vc2UtbGVhbi12aXJ0dWFsc1wiIiwid2VicGFjazovL21sc2l0ZS8uL3NlcnZlci9zcmMvc2NoZW1hLnRzIiwid2VicGFjazovL21sc2l0ZS8uL3NlcnZlci9zcmMvbWFpbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcmVxdWlyZSBzY29wZVxudmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJleHByZXNzXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwiYm9keS1wYXJzZXJcIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJkb3RlbnZcIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJjb3JzXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwibW9uZ29vc2VcIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJwYXRoXCIpOyIsImNvbnN0IF9fV0VCUEFDS19OQU1FU1BBQ0VfT0JKRUNUX18gPSByZXF1aXJlKFwibW9uZ29vc2UtbGVhbi12aXJ0dWFsc1wiKTsiLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG52YXIgX19zcHJlYWRBcnJheSA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheSkgfHwgZnVuY3Rpb24gKHRvLCBmcm9tLCBwYWNrKSB7XG4gICAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn07XG5pbXBvcnQgbW9uZ29vc2UsIHsgU2NoZW1hLCBtb2RlbCwgfSBmcm9tIFwibW9uZ29vc2VcIjtcbmltcG9ydCB7IG1vbmdvb3NlTGVhblZpcnR1YWxzIH0gZnJvbSBcIm1vbmdvb3NlLWxlYW4tdmlydHVhbHNcIjtcbm1vbmdvb3NlLnBsdWdpbihtb25nb29zZUxlYW5WaXJ0dWFscyk7XG52YXIgcmVjb3JkU2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gICAgcGxheWVyOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICBsZXZlbDogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgaGVydHo6IHsgdHlwZTogTnVtYmVyLCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgIGxpbms6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgIHBsYXllcklEOiB7IHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCwgcmVmOiBcIlBsYXllclwiIH0sXG4gICAgbGV2ZWxJRDogeyB0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsIHJlZjogXCJMZXZlbFwiIH0sXG59LCB7XG4gICAgc3RhdGljczoge1xuICAgICAgICBwbGF5ZXJOYW1lVXBkYXRlOiBmdW5jdGlvbiAoc2Vzc2lvbiwgaWQsIG5ld25hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCB0aGlzLnVwZGF0ZU1hbnkoeyBwbGF5ZXJJRDogaWQgfSwgeyAkc2V0OiB7IHBsYXllcjogbmV3bmFtZSB9IH0pLnNlc3Npb24oc2Vzc2lvbildO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbGV2ZWxOYW1lVXBkYXRlOiBmdW5jdGlvbiAoc2Vzc2lvbiwgaWQsIG5ld25hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCB0aGlzLnVwZGF0ZU1hbnkoeyBsZXZlbElEOiBpZCB9LCB7ICRzZXQ6IHsgbGV2ZWw6IG5ld25hbWUgfSB9KS5zZXNzaW9uKHNlc3Npb24pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGNhc2NhZGluZ0RlbGV0ZTogZnVuY3Rpb24gKHNlc3Npb24sIGp1c3RPbmUpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGV2ZWw7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIExldmVsLmZpbmRCeUlkQW5kVXBkYXRlKHRoaXMubGV2ZWxJRCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcHVsbDogeyByZWNvcmRzOiB0aGlzLl9pZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnNlc3Npb24oc2Vzc2lvbildO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgUGxheWVyLmZpbmRCeUlkQW5kVXBkYXRlKHRoaXMucGxheWVySUQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwdWxsOiB7IHJlY29yZHM6IHRoaXMuX2lkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5jOiAoX2EgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYVtcInBvaW50cy5cIi5jb25jYXQodGhpcy5oZXJ0eiA8PSA2MCA/IFwibHJyXCIgOiBcImhyclwiKV0gPSBqdXN0T25lID09PSAxID8gLShsZXZlbCA9PT0gbnVsbCB8fCBsZXZlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGV2ZWwucG9pbnRzKSA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FbXCJwb2ludHMuY29tYlwiXSA9IGp1c3RPbmUgPT09IDEgPyAtKGxldmVsID09PSBudWxsIHx8IGxldmVsID09PSB2b2lkIDAgPyB2b2lkIDAgOiBsZXZlbC5wb2ludHMpIDogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnNlc3Npb24oc2Vzc2lvbildO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHRoaXMuZGVsZXRlT25lKHsgc2Vzc2lvbjogc2Vzc2lvbiB9KV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH0sXG59KTtcbnJlY29yZFNjaGVtYS5wcmUoXCJzYXZlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZXNzaW9uLCBsZXZlbCwgcGxheWVyO1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb24gPSB0aGlzLiRzZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgTGV2ZWwuZmluZE9uZUFuZFVwZGF0ZSh7IG5hbWU6IHRoaXMubGV2ZWwgfSwgeyAkYWRkVG9TZXQ6IHsgcmVjb3JkczogdGhpcy5faWQgfSB9LCB7IG5ldzogdHJ1ZSB9KS5zZXNzaW9uKHNlc3Npb24pXTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGxldmVsID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGV2ZWwgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMZXZlbCBub3QgZm91bmRcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgUGxheWVyLmZpbmRPbmVBbmRVcGRhdGUoeyBuYW1lOiB0aGlzLnBsYXllciB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFkZFRvU2V0OiB7IHJlY29yZHM6IHRoaXMuX2lkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGluYzogKF9hID0ge30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hW1wicG9pbnRzLlwiLmNvbmNhdCh0aGlzLmhlcnR6IDw9IDYwID8gXCJscnJcIiA6IFwiaHJyXCIpXSA9IGxldmVsLnBvaW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2FbXCJwb2ludHMuY29tYlwiXSA9IGxldmVsLnBvaW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgeyBuZXc6IHRydWUgfSkuc2Vzc2lvbihzZXNzaW9uKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXIgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGF5ZXIgbm90IGZvdW5kXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllcklEID0gcGxheWVyLl9pZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXZlbElEID0gbGV2ZWwuX2lkO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xudmFyIGxldmVsU2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gICAgbmFtZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgY3JlYXRvcjogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgcG9zaXRpb246IHsgdHlwZTogTnVtYmVyLCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgIHJlY29yZHM6IFt7IHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCwgcmVmOiBcIlJlY29yZFwiIH1dLFxufSwge1xuICAgIG1pbmltaXplOiBmYWxzZSxcbiAgICB0b0pTT046IHsgdmlydHVhbHM6IHRydWUgfSxcbiAgICB0b09iamVjdDogeyB2aXJ0dWFsczogdHJ1ZSB9LFxuICAgIHZpcnR1YWxzOiB7XG4gICAgICAgIHBvaW50czoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24gPD0gMTAwXG4gICAgICAgICAgICAgICAgICAgID8gMjI1MCAvICgwLjM3ICogdGhpcy5wb3NpdGlvbiArIDkpIC0gNDAuMTJcbiAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHN0YXRpY3M6IHtcbiAgICAgICAgbGV2ZWxQb2ludHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGV2ZWxzO1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIHRoaXMuZmluZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7ICRsdGU6IDEwMCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbHMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyLCBPYmplY3QuYXNzaWduLmFwcGx5KE9iamVjdCwgX19zcHJlYWRBcnJheShbe31dLCBsZXZlbHMubWFwKGZ1bmN0aW9uIChsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9hID0ge30sIF9hW2wuX2lkLnRvU3RyaW5nKCldID0gbC5wb2ludHMsIF9hKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGZhbHNlKSldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgYWRkOiBmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIExldmVsLnVwZGF0ZU1hbnkoeyBwb3NpdGlvbjogeyAkZ3RlOiB0aGlzLnBvc2l0aW9uIH0gfSwgeyAkaW5jOiB7IHBvc2l0aW9uOiAxIH0gfSkuc2Vzc2lvbihzZXNzaW9uKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHNlc3Npb24oc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBQbGF5ZXIudXBkYXRlQWxsUG9pbnRzKHNlc3Npb24pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCB0aGlzLnNhdmUoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBkZWw6IGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9pLCBfYSwgcjtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCBMZXZlbC51cGRhdGVNYW55KHsgcG9zaXRpb246IHsgJGd0OiB0aGlzLnBvc2l0aW9uIH0gfSwgeyAkaW5jOiB7IHBvc2l0aW9uOiAtMSB9IH0pLnNlc3Npb24oc2Vzc2lvbildO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHRoaXMucG9wdWxhdGUoXCJyZWNvcmRzXCIpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2kgPSAwLCBfYSA9IHRoaXMucmVjb3JkcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2kgPCBfYS5sZW5ndGgpKSByZXR1cm4gWzMsIDZdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCByLmNhc2NhZGluZ0RlbGV0ZShzZXNzaW9uKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gNTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaSsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNCwgdGhpcy5kZWxldGVPbmUoeyBzZXNzaW9uOiBzZXNzaW9uIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBQbGF5ZXIudXBkYXRlQWxsUG9pbnRzKHNlc3Npb24pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1vdmU6IGZ1bmN0aW9uIChzZXNzaW9uLCBwb3MpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnBvc2l0aW9uID4gcG9zKSkgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIExldmVsLnVwZGF0ZU1hbnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFuZDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgcG9zaXRpb246IHsgJGd0ZTogcG9zIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHBvc2l0aW9uOiB7ICRsdDogdGhpcy5wb3NpdGlvbiB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7ICRpbmM6IHsgcG9zaXRpb246IDEgfSB9KS5zZXNzaW9uKHNlc3Npb24pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnBvc2l0aW9uIDwgcG9zKSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIExldmVsLnVwZGF0ZU1hbnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFuZDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgcG9zaXRpb246IHsgJGx0ZTogcG9zIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHBvc2l0aW9uOiB7ICRndDogdGhpcy5wb3NpdGlvbiB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7ICRpbmM6IHsgcG9zaXRpb246IC0xIH0gfSkuc2Vzc2lvbihzZXNzaW9uKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFs0LCBMZXZlbC5maW5kQnlJZEFuZFVwZGF0ZSh0aGlzLl9pZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2V0OiB7IHBvc2l0aW9uOiBwb3MgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5zZXNzaW9uKHNlc3Npb24pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBQbGF5ZXIudXBkYXRlQWxsUG9pbnRzKHNlc3Npb24pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfSxcbn0pO1xudmFyIHBsYXllclNjaGVtYSA9IG5ldyBTY2hlbWEoe1xuICAgIG5hbWU6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgIHBvaW50czoge1xuICAgICAgICBscnI6IHsgdHlwZTogTnVtYmVyLCByZXF1aXJlZDogdHJ1ZSwgZGVmYXVsdDogMCB9LFxuICAgICAgICBocnI6IHsgdHlwZTogTnVtYmVyLCByZXF1aXJlZDogdHJ1ZSwgZGVmYXVsdDogMCB9LFxuICAgICAgICBjb21iOiB7IHR5cGU6IE51bWJlciwgcmVxdWlyZWQ6IHRydWUsIGRlZmF1bHQ6IDAgfSxcbiAgICB9LFxuICAgIGRpc2NvcmQ6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogZmFsc2UgfSxcbiAgICByZWNvcmRzOiBbeyB0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsIHJlZjogXCJSZWNvcmRcIiB9XSxcbn0sIHtcbiAgICBtaW5pbWl6ZTogZmFsc2UsXG4gICAgdG9KU09OOiB7IHZpcnR1YWxzOiB0cnVlIH0sXG4gICAgdG9PYmplY3Q6IHsgdmlydHVhbHM6IHRydWUgfSxcbiAgICB2aXJ0dWFsczoge1xuICAgICAgICBoZXJ0ejoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJycyA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnJlY29yZHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgICAgICBycnNbci5oZXJ0el0gPSAocnJzW3IuaGVydHpdIHx8IDApICsgMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJycztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIG1jbGFzczoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICAgICAgICB2YXIgY2xhc3NlcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgWzEsIFwiTGVnYWN5XCJdLFxuICAgICAgICAgICAgICAgICAgICBbNTAsIFwiQ2xhc3MgRFwiXSxcbiAgICAgICAgICAgICAgICAgICAgWzE1MCwgXCJDbGFzcyBDXCJdLFxuICAgICAgICAgICAgICAgICAgICBbMzAwLCBcIkNsYXNzIEJcIl0sXG4gICAgICAgICAgICAgICAgICAgIFs2MDAsIFwiQ2xhc3MgQVwiXSxcbiAgICAgICAgICAgICAgICAgICAgWzEwMDAsIFwiQ2xhc3MgU1wiXSxcbiAgICAgICAgICAgICAgICAgICAgWzIwMDAwLCBcIk92ZXJsb3Jkc1wiXSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGxycjogKChfYSA9IGNsYXNzZXMuZmluZChmdW5jdGlvbiAoYykgeyByZXR1cm4gX3RoaXMucG9pbnRzLmxyciA8IGNbMF07IH0pKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBjbGFzc2VzWzBdKVsxXSxcbiAgICAgICAgICAgICAgICAgICAgaHJyOiAoKF9iID0gY2xhc3Nlcy5maW5kKGZ1bmN0aW9uIChjKSB7IHJldHVybiBfdGhpcy5wb2ludHMuaHJyIDwgY1swXTsgfSkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGNsYXNzZXNbMF0pWzFdLFxuICAgICAgICAgICAgICAgICAgICBjb21iOiAoKF9jID0gY2xhc3Nlcy5maW5kKGZ1bmN0aW9uIChjKSB7IHJldHVybiBfdGhpcy5wb2ludHMuY29tYiA8IGNbMF07IH0pKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBjbGFzc2VzWzBdKVsxXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHN0YXRpY3M6IHtcbiAgICAgICAgdXBkYXRlQWxsUG9pbnRzOiBmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBsZXZlbHMsIGxwLCBwbGF5ZXJzLCBfaSwgcGxheWVyc18xLCBwLCBjb21wbGV0aW9ucywgbHJyLCBocnI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgTGV2ZWwuZmluZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7ICRsdGU6IDEwMCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHt9LCB7IHNlc3Npb246IHNlc3Npb24gfSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVscyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBscCA9IE9iamVjdC5hc3NpZ24uYXBwbHkoT2JqZWN0LCBfX3NwcmVhZEFycmF5KFt7fV0sIGxldmVscy5tYXAoZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKF9hID0ge30sIF9hW2wuaWRdID0gbC5wb2ludHMsIF9hKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZmFsc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHRoaXMuZmluZCh7fSwge30sIHsgc2Vzc2lvbjogc2Vzc2lvbiB9KV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVycyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaSA9IDAsIHBsYXllcnNfMSA9IHBsYXllcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9pIDwgcGxheWVyc18xLmxlbmd0aCkpIHJldHVybiBbMywgN107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHBsYXllcnNfMVtfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBwLmdldENvbXBsZXRlZExldmVscygpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9ucyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBscnIgPSBjb21wbGV0aW9ucy5scnJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAobCkgeyB2YXIgX2E7IHJldHVybiAoX2EgPSBscFtsLmlkXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYSArIGI7IH0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyciA9IGNvbXBsZXRpb25zLmhyclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChsKSB7IHZhciBfYTsgcmV0dXJuIChfYSA9IGxwW2wuaWRdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAwOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhICsgYjsgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5wb2ludHMgPSB7IGxycjogbHJyLCBocnI6IGhyciwgY29tYjogbHJyICsgaHJyIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcC4kc2Vzc2lvbihzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHAuc2F2ZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA2O1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGdldENvbXBsZXRlZExldmVsczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBjb21wbGV0aW9ucywgX2ksIF9hLCByLCBsZXZlbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCB0aGlzLnBvcHVsYXRlKFwicmVjb3Jkc1wiLCBcImxldmVsSUQgaGVydHpcIildO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbHJyOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJyOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pID0gMCwgX2EgPSB0aGlzLnJlY29yZHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9pIDwgX2EubGVuZ3RoKSkgcmV0dXJuIFszLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgTGV2ZWwuZmluZEJ5SWQoci5sZXZlbElEKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWwgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHIuaGVydHogPD0gNjAgPyBjb21wbGV0aW9ucy5scnIgOiBjb21wbGV0aW9ucy5ocnIpLnB1c2gobGV2ZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaSsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiwgY29tcGxldGlvbnNdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlUG9pbnRzOiBmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBjb21wbGV0aW9ucywgbHJyLCBocnI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgdGhpcy5nZXRDb21wbGV0ZWRMZXZlbHMoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGlvbnMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbHJyID0gY29tcGxldGlvbnMubHJyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGwucG9pbnRzOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhICsgYjsgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJyID0gY29tcGxldGlvbnMuaHJyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGwucG9pbnRzOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhICsgYjsgfSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb2ludHMgPSB7IGxycjogbHJyLCBocnI6IGhyciwgY29tYjogbHJyICsgaHJyIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kc2Vzc2lvbihzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHRoaXMuc2F2ZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGJhbjogZnVuY3Rpb24gKHNlc3Npb24pIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2ksIF9hLCByO1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIHRoaXMucG9wdWxhdGUoXCJyZWNvcmRzXCIpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2kgPSAwLCBfYSA9IHRoaXMucmVjb3JkcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2kgPCBfYS5sZW5ndGgpKSByZXR1cm4gWzMsIDVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCByLmNhc2NhZGluZ0RlbGV0ZShzZXNzaW9uKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaSsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbNCwgdGhpcy5kZWxldGVPbmUoeyBzZXNzaW9uOiBzZXNzaW9uIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfSxcbn0pO1xuZXhwb3J0IHZhciBSZWNvcmQgPSBtb2RlbChcIlJlY29yZFwiLCByZWNvcmRTY2hlbWEpO1xuZXhwb3J0IHZhciBMZXZlbCA9IG1vZGVsKFwiTGV2ZWxcIiwgbGV2ZWxTY2hlbWEpO1xuZXhwb3J0IHZhciBQbGF5ZXIgPSBtb2RlbChcIlBsYXllclwiLCBwbGF5ZXJTY2hlbWEpO1xuIiwidmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbnZhciBfYTtcbmltcG9ydCBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIjtcbmltcG9ydCBlbnYgZnJvbSBcImRvdGVudlwiO1xuaW1wb3J0IGNvcnMgZnJvbSBcImNvcnNcIjtcbmltcG9ydCBtb25nb29zZSBmcm9tIFwibW9uZ29vc2VcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBSZWNvcmQsIExldmVsLCBQbGF5ZXIgfSBmcm9tIFwiLi9zY2hlbWFcIjtcbmlmIChwcm9jZXNzLmVudi5CT1RfVE9LRU4gPT09IHVuZGVmaW5lZCB8fFxuICAgIHByb2Nlc3MuZW52Lk1PTkdPREJfVEVTVF9VUkkgPT09IHVuZGVmaW5lZClcbiAgICBlbnYuY29uZmlnKCk7XG52YXIgYXBwID0gZXhwcmVzcygpO1xudmFyIHBvcnQgPSAoX2EgPSBwcm9jZXNzLmVudi5QT1JUKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAzMDAwO1xuYXBwLnNldChcInF1ZXJ5IHBhcnNlclwiLCBcInNpbXBsZVwiKTtcbmFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IHRydWUgfSkpO1xuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSk7XG5hcHAudXNlKGNvcnMoKSk7XG5hcHAudXNlKFwiL1wiLCBleHByZXNzLnN0YXRpYyhwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBcIi4uL2NsaWVudFwiKSkpO1xudmFyIGF1dGhlZCA9IGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAoISgoX2EgPSByZXEuaGVhZGVycy5hdXRoKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcIlwiID09PSBwcm9jZXNzLmVudi5CT1RfVE9LRU4pKSB7XG4gICAgICAgIHJldHVybiByZXMuc2VuZFN0YXR1cyg0MDMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbmV4dCgpO1xuICAgIH1cbn07XG52YXIgdHJhbnNhY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHJlcSwgcmVzKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2Vzc2lvbiwgcmVzdWx0LCBfYSwgX2IsIGNvZGVfMTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCBtb25nb29zZS5zdGFydFNlc3Npb24oKV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzIsIDUsIDcsIDldKTtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5zdGFydFRyYW5zYWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIF9iID0gKF9hID0gcmVzKS5zZW5kU3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGZuKHJlcSwgcmVzLCBzZXNzaW9uKV07XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBfYi5hcHBseShfYSwgW19jLnNlbnQoKV0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHNlc3Npb24uY29tbWl0VHJhbnNhY3Rpb24oKV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgOV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBjb2RlXzEgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgc2Vzc2lvbi5hYm9ydFRyYW5zYWN0aW9uKCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGNvZGVfMSA9PT0gXCJudW1iZXJcIiA/IHJlcy5zZW5kU3RhdHVzKGNvZGVfMSkgOiBjb25zb2xlLmxvZyhjb2RlXzEpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDldO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogcmV0dXJuIFs0LCBzZXNzaW9uLmVuZFNlc3Npb24oKV07XG4gICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiwgcmVzdWx0XTtcbiAgICAgICAgICAgICAgICBjYXNlIDk6IHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pOyB9O1xufTtcbmFwcC5nZXQoXCIvbGV2ZWxzXCIsIGZ1bmN0aW9uIChyZXEsIHJlcykgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGV2ZWxzO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIExldmVsLmZpbmQoeyBwb3NpdGlvbjogeyAkbHRlOiAxMDAgfSB9KVxuICAgICAgICAgICAgICAgICAgICAubGVhbih7IHZpcnR1YWxzOiB0cnVlIH0pXG4gICAgICAgICAgICAgICAgICAgIC5zb3J0KFwicG9zaXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdChcIi1faWQgLV9fdiAtcmVjb3Jkc1wiKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgbGV2ZWxzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgcmVzLnN0YXR1cygyMDApLmpzb24obGV2ZWxzKV07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9KTtcbmFwcC5nZXQoXCIvbGV2ZWxzLzpuYW1lXCIsIGZ1bmN0aW9uIChyZXEsIHJlcykgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGV2ZWw7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgTGV2ZWwuZmluZE9uZSh7IG5hbWU6IHJlcS5wYXJhbXMubmFtZSB9KVxuICAgICAgICAgICAgICAgICAgICAubGVhbih7IHZpcnR1YWxzOiB0cnVlIH0pXG4gICAgICAgICAgICAgICAgICAgIC5wb3B1bGF0ZShcInJlY29yZHNcIiwgXCItX2lkIC1fX3YgLWxldmVsIC1sZXZlbElEIC1wbGF5ZXJJRFwiKVxuICAgICAgICAgICAgICAgICAgICAuc2VsZWN0KFwiLV9pZCAtX192XCIpXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBsZXZlbCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIsIGxldmVsXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHJlcy5zdGF0dXMoMjAwKS5qc29uKGxldmVsKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiByZXMuc3RhdHVzKDQwNCkuc2VuZChcIkxldmVsIG5vdCBmb3VuZC5cIildO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfSk7XG5hcHAucG9zdChcIi9sZXZlbHNcIiwgYXV0aGVkLCB0cmFuc2FjdGlvbihmdW5jdGlvbiAocmVxLCByZXMsIHNlc3Npb24pIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxldmVsO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIExldmVsLmV4aXN0cyh7IG5hbWU6IHJlcS5ib2R5Lm5hbWUgfSldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGlmIChfYS5zZW50KCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IDQwOTtcbiAgICAgICAgICAgICAgICBsZXZlbCA9IG5ldyBMZXZlbCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHJlcS5ib2R5Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0b3I6IHJlcS5ib2R5LmNyZWF0b3IsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZXEuYm9keS5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGxldmVsLmFkZChzZXNzaW9uKV07XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgMjAxXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH0pKTtcbmFwcC5kZWxldGUoXCIvbGV2ZWxzLzpuYW1lXCIsIGF1dGhlZCwgdHJhbnNhY3Rpb24oZnVuY3Rpb24gKHJlcSwgcmVzLCBzZXNzaW9uKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBsZXZlbDtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCBMZXZlbC5maW5kT25lKHsgbmFtZTogcmVxLnBhcmFtcy5uYW1lIH0pXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBsZXZlbCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAobGV2ZWwgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IDQwNDtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGxldmVsLmRlbChzZXNzaW9uKV07XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgMjAwXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH0pKTtcbmFwcC5wYXRjaChcIi9sZXZlbHMvOm5hbWVcIiwgYXV0aGVkLCB0cmFuc2FjdGlvbihmdW5jdGlvbiAocmVxLCByZXMsIHNlc3Npb24pIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxldmVsLCBsZXZlbCwgbGV2ZWw7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgaWYgKCEocmVxLmJvZHkubmV3cG9zICE9PSB1bmRlZmluZWQpKSByZXR1cm4gWzMsIDNdO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCwgTGV2ZWwuZmluZE9uZSh7IG5hbWU6IHJlcS5wYXJhbXMubmFtZSB9KV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgbGV2ZWwgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKGxldmVsID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyA0MDQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBsZXZlbC5tb3ZlKHNlc3Npb24sIHJlcS5ib2R5Lm5ld3BvcyldO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIsIDIwMF07XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgaWYgKCEocmVxLmJvZHkubmV3bmFtZSAhPT0gdW5kZWZpbmVkKSkgcmV0dXJuIFszLCA2XTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQsIExldmVsLmZpbmRPbmVBbmRVcGRhdGUoeyBuYW1lOiByZXEucGFyYW1zLm5hbWUgfSwgeyAkc2V0OiB7IG5hbWU6IHJlcS5ib2R5Lm5ld25hbWUgfSB9KS5zZXNzaW9uKHNlc3Npb24pXTtcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBsZXZlbCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAobGV2ZWwgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IDQwNDtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQsIFJlY29yZC5sZXZlbE5hbWVVcGRhdGUoc2Vzc2lvbiwgbGV2ZWwuX2lkLCByZXEuYm9keS5uZXduYW1lKV07XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgMjAwXTtcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBpZiAoIShyZXEuYm9keS5uZXdjcmVhdG9yICE9PSB1bmRlZmluZWQpKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCwgTGV2ZWwuZmluZE9uZUFuZFVwZGF0ZSh7IG5hbWU6IHJlcS5wYXJhbXMubmFtZSB9LCB7ICRzZXQ6IHsgY3JlYXRvcjogcmVxLmJvZHkubmV3Y3JlYXRvciB9IH0pLnNlc3Npb24oc2Vzc2lvbildO1xuICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIGxldmVsID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIGlmIChsZXZlbCA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgNDA0O1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgMjAwXTtcbiAgICAgICAgICAgIGNhc2UgODogdGhyb3cgNDAwO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfSkpO1xuYXBwLmdldChcIi9wbGF5ZXJzXCIsIGZ1bmN0aW9uIChyZXEsIHJlcykgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGxheWVycztcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCBQbGF5ZXIuZmluZCh7IFwicG9pbnRzLmNvbWJcIjogeyAkZ3Q6IDAgfSB9KVxuICAgICAgICAgICAgICAgICAgICAubGVhbigpXG4gICAgICAgICAgICAgICAgICAgIC5zb3J0KFwiLXBvaW50cy5scnJcIilcbiAgICAgICAgICAgICAgICAgICAgLnNlbGVjdChcIm5hbWUgcG9pbnRzIC1faWRcIildO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHBsYXllcnMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyLCByZXMuc3RhdHVzKDIwMCkuanNvbihwbGF5ZXJzKV07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9KTtcbmFwcC5nZXQoXCIvcGxheWVycy86bmFtZVwiLCBmdW5jdGlvbiAocmVxLCByZXMpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBsYXllcjtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCBQbGF5ZXIuZmluZE9uZSh7IG5hbWU6IHJlcS5wYXJhbXMubmFtZSB9KVxuICAgICAgICAgICAgICAgICAgICAubGVhbih7IHZpcnR1YWxzOiB0cnVlIH0pXG4gICAgICAgICAgICAgICAgICAgIC5wb3B1bGF0ZShcInJlY29yZHNcIiwgXCItX2lkIC1pZCAtX192IC1wbGF5ZXIgLWxldmVsSUQgLXBsYXllcklEXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3QoXCItX2lkIC1pZCAtX192XCIpXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBwbGF5ZXIgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyLCBwbGF5ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gcmVzLnN0YXR1cygyMDApLmpzb24ocGxheWVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiByZXMuc3RhdHVzKDQwNCkuc2VuZChcIlBsYXllciBub3QgZm91bmQuXCIpXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH0pO1xuYXBwLnBvc3QoXCIvcGxheWVyc1wiLCBhdXRoZWQsIHRyYW5zYWN0aW9uKGZ1bmN0aW9uIChyZXEsIHJlcywgc2Vzc2lvbikgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGxheWVyO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIFBsYXllci5leGlzdHMoeyBuYW1lOiByZXEuYm9keS5uYW1lIH0pXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpZiAoX2Euc2VudCgpKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyA0MDk7XG4gICAgICAgICAgICAgICAgcGxheWVyID0gbmV3IFBsYXllcih7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHJlcS5ib2R5Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGRpc2NvcmQ6IHJlcS5ib2R5LmRpc2NvcmQgPT09IG51bGwgPyB1bmRlZmluZWQgOiByZXEuYm9keS5kaXNjb3JkLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHBsYXllci4kc2Vzc2lvbihzZXNzaW9uKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHBsYXllci5zYXZlKCldO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIsIDIwMV07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9KSk7XG5hcHAuZGVsZXRlKFwiL3BsYXllcnMvOm5hbWVcIiwgYXV0aGVkLCB0cmFuc2FjdGlvbihmdW5jdGlvbiAocmVxLCByZXMsIHNlc3Npb24pIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBsYXllcjtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCBQbGF5ZXIuZmluZE9uZSh7IG5hbWU6IHJlcS5wYXJhbXMubmFtZSB9KV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcGxheWVyID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IDQwNDtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHBsYXllci5iYW4oc2Vzc2lvbildO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIsIDIwMF07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9KSk7XG5hcHAucGF0Y2goXCIvcGxheWVycy86bmFtZVwiLCBhdXRoZWQsIHRyYW5zYWN0aW9uKGZ1bmN0aW9uIChyZXEsIHJlcywgc2Vzc2lvbikgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGxheWVyLCBwbGF5ZXI7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgaWYgKCEocmVxLmJvZHkubmV3bmFtZSAhPT0gdW5kZWZpbmVkKSkgcmV0dXJuIFszLCAzXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQsIFBsYXllci5maW5kT25lQW5kVXBkYXRlKHsgbmFtZTogcmVxLnBhcmFtcy5uYW1lIH0sIHsgJHNldDogeyBuYW1lOiByZXEuYm9keS5uZXduYW1lIH0gfSkuc2Vzc2lvbihzZXNzaW9uKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcGxheWVyID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IDQwNDtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQsIFJlY29yZC5wbGF5ZXJOYW1lVXBkYXRlKHNlc3Npb24sIHBsYXllci5faWQsIHJlcS5ib2R5Lm5ld25hbWUpXTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyLCAyMDBdO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGlmICghKHJlcS5ib2R5Lm5ld2Rpc2NvcmQgIT09IHVuZGVmaW5lZCkpIHJldHVybiBbMywgNV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBQbGF5ZXIuZmluZE9uZUFuZFVwZGF0ZSh7IG5hbWU6IHJlcS5wYXJhbXMubmFtZSB9LCB7ICRzZXQ6IHsgZGlzY29yZDogcmVxLmJvZHkubmV3ZGlzY29yZCB9IH0pLnNlc3Npb24oc2Vzc2lvbildO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHBsYXllciA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAocGxheWVyID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyA0MDQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyLCAyMDBdO1xuICAgICAgICAgICAgY2FzZSA1OiB0aHJvdyA0MDA7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9KSk7XG5hcHAucG9zdChcIi9yZWNvcmRzXCIsIGF1dGhlZCwgdHJhbnNhY3Rpb24oZnVuY3Rpb24gKHJlcSwgcmVzLCBzZXNzaW9uKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBfYSwgcmVjb3JkO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIFBsYXllci5leGlzdHMoeyBuYW1lOiByZXEuYm9keS5wbGF5ZXIgfSldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIF9hID0gIShfYi5zZW50KCkpO1xuICAgICAgICAgICAgICAgIGlmIChfYSkgcmV0dXJuIFszLCAzXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQsIExldmVsLmV4aXN0cyh7IG5hbWU6IHJlcS5ib2R5LmxldmVsIH0pXTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBfYSA9ICEoX2Iuc2VudCgpKTtcbiAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgaWYgKF9hKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyA0MDQ7XG4gICAgICAgICAgICAgICAgaWYgKHJlcS5ib2R5LmhlcnR6ID09PSB1bmRlZmluZWQgfHwgcmVxLmJvZHkubGluayA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyA0MDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBSZWNvcmQuZXhpc3RzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllcjogcmVxLmJvZHkucGxheWVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWw6IHJlcS5ib2R5LmxldmVsLFxuICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgaWYgKF9iLnNlbnQoKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgNDA5O1xuICAgICAgICAgICAgICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoe1xuICAgICAgICAgICAgICAgICAgICBwbGF5ZXI6IHJlcS5ib2R5LnBsYXllcixcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWw6IHJlcS5ib2R5LmxldmVsLFxuICAgICAgICAgICAgICAgICAgICBoZXJ0ejogcmVxLmJvZHkuaGVydHosXG4gICAgICAgICAgICAgICAgICAgIGxpbms6IHJlcS5ib2R5LmxpbmssXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmVjb3JkLiRzZXNzaW9uKHNlc3Npb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCwgcmVjb3JkLnNhdmUoKV07XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgMjAxXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH0pKTtcbmFwcC5kZWxldGUoXCIvcmVjb3Jkc1wiLCBhdXRoZWQsIHRyYW5zYWN0aW9uKGZ1bmN0aW9uIChyZXEsIHJlcywgc2Vzc2lvbikgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVjb3JkO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGlmIChyZXEuYm9keS5wbGF5ZXIgPT09IHVuZGVmaW5lZCB8fCByZXEuYm9keS5sZXZlbCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyA0MDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBSZWNvcmQuZmluZE9uZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXI6IHJlcS5ib2R5LnBsYXllcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsOiByZXEuYm9keS5sZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJlY29yZCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyA0MDQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0LCByZWNvcmQuY2FzY2FkaW5nRGVsZXRlKHNlc3Npb24sIDEpXTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyLCAyMDBdO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfSkpO1xuYXBwLnBvc3QoXCIvc3VibWl0XCIsIGZ1bmN0aW9uIChyZXEsIHJlcykgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaXNOZXc7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgaXNOZXcgPSAwO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCwgUmVjb3JkLmV4aXN0cyh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXI6IHJlcS5ib2R5LnBsYXllcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsOiByZXEuYm9keS5sZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGlmIChfYS5zZW50KCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiwgcmVzLnNlbmRTdGF0dXMoNDA5KV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBQbGF5ZXIuZXhpc3RzKHsgbmFtZTogcmVxLmJvZHkucGxheWVyIH0pXTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBpZiAoIShfYS5zZW50KCkpKVxuICAgICAgICAgICAgICAgICAgICBpc05ldyArPSAxO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCwgTGV2ZWwuZXhpc3RzKHsgbmFtZTogcmVxLmJvZHkubGV2ZWwgfSldO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGlmICghKF9hLnNlbnQoKSkpXG4gICAgICAgICAgICAgICAgICAgIGlzTmV3ICs9IDI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyLCBmZXRjaChcIlwiLmNvbmNhdChwcm9jZXNzLmVudi5CT1RfTElTVEVORVJfVVJJLCBcIi9zdWJtaXRcIiksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoX19hc3NpZ24oX19hc3NpZ24oe30sIHJlcS5ib2R5KSwgeyBpc05ldzogaXNOZXcgfSkpLFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIHJlcy5zZW5kU3RhdHVzKGRhdGEuc3RhdHVzKTsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiByZXMuc2VuZFN0YXR1cyg1MDMpOyB9KV07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9KTtcbmFwcC5nZXQoXCIvbWVtYmVyc1wiLCBmdW5jdGlvbiAocmVxLCByZXMpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBsYXllcnM7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgUGxheWVyLmZpbmQoeyBkaXNjb3JkOiB7ICRleGlzdHM6IHRydWUgfSB9KVxuICAgICAgICAgICAgICAgICAgICAubGVhbigpXG4gICAgICAgICAgICAgICAgICAgIC5zb3J0KFwiLXBvaW50cy5jb21iXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3QoXCJuYW1lIGRpc2NvcmQgcG9pbnRzLmNvbWIgLV9pZFwiKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcGxheWVycyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIsIHJlcy5zdGF0dXMoMjAwKS5qc29uKHBsYXllcnMpXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH0pO1xudHJ5IHtcbiAgICBtb25nb29zZS5jb25uZWN0KHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJKTtcbn1cbmNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xufVxuYXBwLmxpc3Rlbihwb3J0LCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc29sZS5sb2coXCJBcHAgbGlzdGVuaW5nIGF0IGh0dHA6Ly9sb2NhbGhvc3Q6XCIuY29uY2F0KHBvcnQpKTtcbn0pO1xuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGUiLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwicmVxdWlyZSIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJfX2dlbmVyYXRvciIsImJvZHkiLCJmIiwieSIsInQiLCJnIiwiXyIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ0aGlzIiwibiIsInYiLCJvcCIsIlR5cGVFcnJvciIsInBvcCIsImxlbmd0aCIsInB1c2giLCJfX3NwcmVhZEFycmF5IiwidG8iLCJmcm9tIiwicGFjayIsImFyZ3VtZW50cyIsImFyIiwiaSIsImwiLCJBcnJheSIsInNsaWNlIiwiY29uY2F0IiwibW9uZ29vc2VMZWFuVmlydHVhbHMiLCJyZWNvcmRTY2hlbWEiLCJTY2hlbWEiLCJwbGF5ZXIiLCJ0eXBlIiwiU3RyaW5nIiwicmVxdWlyZWQiLCJsZXZlbCIsImhlcnR6IiwiTnVtYmVyIiwibGluayIsInBsYXllcklEIiwicmVmIiwibGV2ZWxJRCIsInN0YXRpY3MiLCJwbGF5ZXJOYW1lVXBkYXRlIiwic2Vzc2lvbiIsImlkIiwibmV3bmFtZSIsIl9hIiwidXBkYXRlTWFueSIsIiRzZXQiLCJsZXZlbE5hbWVVcGRhdGUiLCJtZXRob2RzIiwiY2FzY2FkaW5nRGVsZXRlIiwianVzdE9uZSIsIl9iIiwiTGV2ZWwiLCJmaW5kQnlJZEFuZFVwZGF0ZSIsIiRwdWxsIiwicmVjb3JkcyIsIl9pZCIsIlBsYXllciIsIiRpbmMiLCJwb2ludHMiLCJkZWxldGVPbmUiLCJwcmUiLCIkc2Vzc2lvbiIsImZpbmRPbmVBbmRVcGRhdGUiLCJuYW1lIiwiJGFkZFRvU2V0IiwibmV3IiwiRXJyb3IiLCJsZXZlbFNjaGVtYSIsImNyZWF0b3IiLCJwb3NpdGlvbiIsIm1pbmltaXplIiwidG9KU09OIiwidmlydHVhbHMiLCJ0b09iamVjdCIsImxldmVsUG9pbnRzIiwibGV2ZWxzIiwiZmluZCIsIiRsdGUiLCJhc3NpZ24iLCJtYXAiLCJ0b1N0cmluZyIsImFkZCIsIiRndGUiLCJ1cGRhdGVBbGxQb2ludHMiLCJzYXZlIiwiZGVsIiwiX2kiLCIkZ3QiLCJwb3B1bGF0ZSIsIm1vdmUiLCJwb3MiLCIkYW5kIiwiJGx0IiwicGxheWVyU2NoZW1hIiwibHJyIiwiZGVmYXVsdCIsImhyciIsImNvbWIiLCJkaXNjb3JkIiwicnJzIiwiciIsIm1jbGFzcyIsIl9jIiwiX3RoaXMiLCJjbGFzc2VzIiwiYyIsImxwIiwicGxheWVycyIsInBsYXllcnNfMSIsInAiLCJjb21wbGV0aW9ucyIsImdldENvbXBsZXRlZExldmVscyIsInJlZHVjZSIsImIiLCJmaW5kQnlJZCIsInVwZGF0ZVBvaW50cyIsImJhbiIsIlJlY29yZCIsIm1vZGVsIiwiX19hc3NpZ24iLCJzIiwidW5kZWZpbmVkIiwicHJvY2VzcyIsImVudiIsIkJPVF9UT0tFTiIsIk1PTkdPREJfVEVTVF9VUkkiLCJhcHAiLCJwb3J0IiwiUE9SVCIsInNldCIsInVzZSIsImV4dGVuZGVkIiwiX19kaXJuYW1lIiwiYXV0aGVkIiwicmVxIiwicmVzIiwiaGVhZGVycyIsImF1dGgiLCJzZW5kU3RhdHVzIiwidHJhbnNhY3Rpb24iLCJmbiIsImNvZGVfMSIsInN0YXJ0VHJhbnNhY3Rpb24iLCJjb21taXRUcmFuc2FjdGlvbiIsImFib3J0VHJhbnNhY3Rpb24iLCJjb25zb2xlIiwibG9nIiwiZW5kU2Vzc2lvbiIsImxlYW4iLCJzb3J0Iiwic2VsZWN0Iiwic3RhdHVzIiwianNvbiIsImZpbmRPbmUiLCJwYXJhbXMiLCJzZW5kIiwicG9zdCIsImV4aXN0cyIsImRlbGV0ZSIsInBhdGNoIiwibmV3cG9zIiwibmV3Y3JlYXRvciIsIm5ld2Rpc2NvcmQiLCJyZWNvcmQiLCJpc05ldyIsImZldGNoIiwiQk9UX0xJU1RFTkVSX1VSSSIsIm1ldGhvZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwiY2F0Y2giLCIkZXhpc3RzIiwiTU9OR09EQl9VUkkiLCJlcnJvciIsImxpc3RlbiJdLCJzb3VyY2VSb290IjoiIn0=