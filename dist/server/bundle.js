(()=>{"use strict";var e={n:n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},d:(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n)};const n=require("express");var t=e.n(n);const r=require("body-parser");var s=e.n(r);const i=require("dotenv");var o=e.n(i);const a=require("cors");var u=e.n(a);const c=require("mongoose");var l=e.n(c);const d=require("path");var p=e.n(d),f=function(e,n,t,r){return new(t||(t=Promise))((function(s,i){function o(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var n;e.done?s(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(o,a)}u((r=r.apply(e,n||[])).next())}))},h=function(e,n){var t,r,s,i,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(u){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(o=0)),o;)try{if(t=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=n.call(e,o)}catch(e){a=[6,e],r=0}finally{t=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},v=function(e,n,t){if(t||2===arguments.length)for(var r,s=0,i=n.length;s<i;s++)!r&&s in n||(r||(r=Array.prototype.slice.call(n,0,s)),r[s]=n[s]);return e.concat(r||Array.prototype.slice.call(n))},y=new c.Schema({player:{type:String,required:!0},level:{type:String,required:!0},hertz:{type:Number,required:!0},link:{type:String,required:!0},playerID:{type:c.Schema.Types.ObjectId,ref:"Player"},levelID:{type:c.Schema.Types.ObjectId,ref:"Level"}},{statics:{playerNameUpdate:function(e,n,t){return f(this,void 0,void 0,(function(){return h(this,(function(r){switch(r.label){case 0:return[4,this.updateMany({playerID:n},{$set:{player:t}}).session(e)];case 1:return r.sent(),[2]}}))}))},levelNameUpdate:function(e,n,t){return f(this,void 0,void 0,(function(){return h(this,(function(r){switch(r.label){case 0:return[4,this.updateMany({levelID:n},{$set:{level:t}}).session(e)];case 1:return r.sent(),[2]}}))}))}},methods:{cascadingDelete:function(e,n){return f(this,void 0,void 0,(function(){var t;return h(this,(function(r){switch(r.label){case 0:return[4,O.findByIdAndUpdate(this.levelID,{$pull:{records:this._id}}).session(e)];case 1:return t=r.sent(),[4,$.findByIdAndUpdate(this.playerID,{$pull:{records:this._id},$inc:{points:1===n?-(null==t?void 0:t.points):0}}).session(e)];case 2:return r.sent(),[4,this.deleteOne({session:e})];case 3:return r.sent(),[2]}}))}))}}});y.pre("save",(function(){return f(this,void 0,void 0,(function(){var e,n,t;return h(this,(function(r){switch(r.label){case 0:return e=this.$session(),[4,O.findOneAndUpdate({name:this.level},{$addToSet:{records:this._id}},{new:!0}).session(e)];case 1:if(null===(n=r.sent()))throw new Error("Level not found");return[4,$.findOneAndUpdate({name:this.player},{$addToSet:{records:this._id},$inc:{points:n.points}},{new:!0}).session(e)];case 2:if(null===(t=r.sent()))throw new Error("Player not found");return this.playerID=t._id,this.levelID=n._id,[2]}}))}))}));var b,m=new c.Schema({name:{type:String,required:!0},creator:{type:String,required:!0},position:{type:Number,required:!0},records:[{type:c.Schema.Types.ObjectId,ref:"Record"}]},{minimize:!1,toJSON:{virtuals:!0},toObject:{virtuals:!0},virtuals:{points:{get:function(){return this.position<=100?2250/(.37*this.position+9)-40:0}}},statics:{levelPoints:function(){return f(this,void 0,void 0,(function(){var e;return h(this,(function(n){switch(n.label){case 0:return[4,this.find({position:{$lte:100}})];case 1:return e=n.sent(),[2,Object.assign.apply(Object,v([{}],e.map((function(e){var n;return(n={})[e._id.toString()]=e.points,n})),!1))]}}))}))}},methods:{add:function(e){return f(this,void 0,void 0,(function(){return h(this,(function(n){switch(n.label){case 0:return[4,O.updateMany({position:{$gte:this.position}},{$inc:{position:1}}).session(e)];case 1:return n.sent(),this.$session(e),[4,$.updateAllPoints(e)];case 2:return n.sent(),[4,this.save()];case 3:return n.sent(),[2]}}))}))},del:function(e){return f(this,void 0,void 0,(function(){var n,t;return h(this,(function(r){switch(r.label){case 0:return[4,O.updateMany({position:{$gt:this.position}},{$inc:{position:-1}}).session(e)];case 1:return r.sent(),[4,this.populate("records")];case 2:r.sent(),n=0,t=this.records,r.label=3;case 3:return n<t.length?[4,t[n].cascadingDelete(e)]:[3,6];case 4:r.sent(),r.label=5;case 5:return n++,[3,3];case 6:return[4,this.deleteOne({session:e})];case 7:return r.sent(),[4,$.updateAllPoints(e)];case 8:return r.sent(),[2]}}))}))},move:function(e,n){return f(this,void 0,void 0,(function(){return h(this,(function(t){switch(t.label){case 0:return this.position>n?[4,O.updateMany({$and:[{position:{$gte:n}},{position:{$lt:this.position}}]},{$inc:{position:1}}).session(e)]:[3,2];case 1:return t.sent(),[3,4];case 2:return this.position<n?[4,O.updateMany({$and:[{position:{$lte:n}},{position:{$gt:this.position}}]},{$inc:{position:-1}}).session(e)]:[3,4];case 3:t.sent(),t.label=4;case 4:return[4,O.findByIdAndUpdate(this._id,{$set:{position:n}}).session(e)];case 5:return t.sent(),[4,$.updateAllPoints(e)];case 6:return t.sent(),[2]}}))}))}}}),w=new c.Schema({name:{type:String,required:!0},points:{type:Number,required:!0,default:0},discord:{type:String},records:[{type:c.Schema.Types.ObjectId,ref:"Record"}]},{minimize:!1,toJSON:{virtuals:!0},toObject:{virtuals:!0},virtuals:{hertz:{get:function(){return f(this,void 0,void 0,(function(){var e,n,t,r;return h(this,(function(s){switch(s.label){case 0:return[4,this.populate("records","hertz")];case 1:for(s.sent(),e={},n=0,t=this.records;n<t.length;n++)r=t[n],e[r.hertz]=(e[r.hertz]||0)+1;return this.depopulate(),[2,e]}}))}))}},class:{get:function(){var e,n=this,t=[[1,"Legacy"],[50,"Class D"],[150,"Class C"],[300,"Class B"],[600,"Class A"],[1e3,"Class S"],[2e4,"Overlords"]];return(null!==(e=t.find((function(e){return n.points<e[0]})))&&void 0!==e?e:t[0])[1]}}},statics:{updateAllPoints:function(e){return f(this,void 0,void 0,(function(){var n,t,r,s,i,o,a,u;return h(this,(function(c){switch(c.label){case 0:return[4,O.find({position:{$lte:100}},{},{session:e})];case 1:return n=c.sent(),t=Object.assign.apply(Object,v([{}],n.map((function(e){var n;return(n={})[e.id]=e.points,n})),!1)),[4,this.find({},{},{session:e})];case 2:r=c.sent(),s=0,i=r,c.label=3;case 3:return s<i.length?[4,(o=i[s]).getCompletedLevels().then((function(e){return e.map((function(e){return e.id}))}))]:[3,7];case 4:if(a=c.sent(),u=a.map((function(e){var n;return null!==(n=t[e])&&void 0!==n?n:0})).reduce((function(e,n){return e+n}),0),o.points=u,null===o)throw 500;return o.$session(e),[4,o.save()];case 5:c.sent(),c.label=6;case 6:return s++,[3,3];case 7:return[2]}}))}))}},methods:{getCompletedLevels:function(){return f(this,void 0,void 0,(function(){var e,n,t,r,s,i;return h(this,(function(o){switch(o.label){case 0:return[4,this.populate("records","levelID")];case 1:o.sent(),e=[],n=0,t=this.records,o.label=2;case 2:return n<t.length?(r=t[n],i=(s=e).push,[4,O.findById(r.levelID)]):[3,5];case 3:i.apply(s,[o.sent()]),o.label=4;case 4:return n++,[3,2];case 5:return[2,e]}}))}))},updatePoints:function(e){return f(this,void 0,void 0,(function(){var n,t;return h(this,(function(r){switch(r.label){case 0:return[4,this.getCompletedLevels()];case 1:return n=r.sent(),t=n.map((function(e){return e.points})).reduce((function(e,n){return e+n}),0),this.points=t,this.$session(e),[4,this.save()];case 2:return r.sent(),[2]}}))}))},ban:function(e){return f(this,void 0,void 0,(function(){var n,t;return h(this,(function(r){switch(r.label){case 0:return[4,this.populate("records")];case 1:r.sent(),n=0,t=this.records,r.label=2;case 2:return n<t.length?[4,t[n].cascadingDelete(e)]:[3,5];case 3:r.sent(),r.label=4;case 4:return n++,[3,2];case 5:return[4,this.deleteOne({session:e})];case 6:return r.sent(),[2]}}))}))}}}),g=(0,c.model)("Record",y),O=(0,c.model)("Level",m),$=(0,c.model)("Player",w),S=function(e,n,t,r){return new(t||(t=Promise))((function(s,i){function o(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var n;e.done?s(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(o,a)}u((r=r.apply(e,n||[])).next())}))},I=function(e,n){var t,r,s,i,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(u){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(o=0)),o;)try{if(t=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=n.call(e,o)}catch(e){a=[6,e],r=0}finally{t=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}};o().config();var D=t()(),j=null!==(b=process.env.PORT)&&void 0!==b?b:3e3;D.set("query parser","simple"),D.use(s().urlencoded({extended:!0})),D.use(s().json()),D.use(u()()),D.use("/",t().static(p().resolve(__dirname,"../client")));var A=function(e,n,t){var r;if(!(null!==(r=e.headers.auth)&&void 0!==r?r:""===process.env.BOT_TOKEN))return n.sendStatus(403);t()},_=function(e){return function(n,t){return S(void 0,void 0,void 0,(function(){var r,s,i,o,a;return I(this,(function(u){switch(u.label){case 0:return[4,l().startSession()];case 1:r=u.sent(),u.label=2;case 2:return u.trys.push([2,5,7,9]),r.startTransaction(),o=(i=t).sendStatus,[4,e(n,t,r)];case 3:return s=o.apply(i,[u.sent()]),[4,r.commitTransaction()];case 4:return u.sent(),[3,9];case 5:return a=u.sent(),[4,r.abortTransaction()];case 6:return u.sent(),s="number"==typeof a?t.sendStatus(a):console.log(a),[3,9];case 7:return[4,r.endSession()];case 8:return u.sent(),[2,s];case 9:return[2]}}))}))}};D.get("/levels",(function(e,n){return S(void 0,void 0,void 0,(function(){var e;return I(this,(function(t){switch(t.label){case 0:return[4,O.find({position:{$lte:100}}).lean().sort("position")];case 1:return e=t.sent(),[2,n.status(200).json(e)]}}))}))})),D.get("/levels/:name",(function(e,n){return S(void 0,void 0,void 0,(function(){var t;return I(this,(function(r){switch(r.label){case 0:return[4,O.findOne({name:e.params.name}).lean().populate("records","player hertz link playerID")];case 1:return t=r.sent(),[2,n.status(200).json(null==t?void 0:t.records)]}}))}))})),D.post("/levels",A,_((function(e,n,t){return S(void 0,void 0,void 0,(function(){return I(this,(function(n){switch(n.label){case 0:return[4,O.exists({name:e.body.name})];case 1:if(n.sent())throw 409;return[4,new O({name:e.body.name,creator:e.body.creator,position:e.body.position}).add(t)];case 2:return n.sent(),[2,201]}}))}))}))),D.delete("/levels/:name",A,_((function(e,n,t){return S(void 0,void 0,void 0,(function(){var n;return I(this,(function(r){switch(r.label){case 0:return[4,O.findOne({name:e.params.name})];case 1:if(null===(n=r.sent()))throw 404;return[4,n.del(t)];case 2:return r.sent(),[2,200]}}))}))}))),D.patch("/levels/:name",A,_((function(e,n,t){return S(void 0,void 0,void 0,(function(){var n;return I(this,(function(r){switch(r.label){case 0:return void 0===e.body.newpos?[3,3]:[4,O.findOne({name:e.params.name})];case 1:if(null===(n=r.sent()))throw 404;return[4,n.move(t,e.body.newpos)];case 2:case 5:return r.sent(),[2,200];case 3:return void 0===e.body.newname?[3,6]:[4,O.findOneAndUpdate({name:e.params.name},{$set:{name:e.body.newname}}).session(t)];case 4:if(null===(n=r.sent()))throw 404;return[4,g.levelNameUpdate(t,n._id,e.body.newname)];case 6:return void 0===e.body.newcreator?[3,8]:[4,O.findOneAndUpdate({name:e.params.name},{$set:{creator:e.body.newcreator}}).session(t)];case 7:if(null===(n=r.sent()))throw 404;return[2,200];case 8:throw 400}}))}))}))),D.get("/players",(function(e,n){return S(void 0,void 0,void 0,(function(){var e;return I(this,(function(t){switch(t.label){case 0:return[4,$.find({points:{$gt:0}}).select("name points").lean().sort("-points")];case 1:return e=t.sent(),[2,n.status(200).json(e)]}}))}))})),D.get("/players/:name",(function(e,n){return S(void 0,void 0,void 0,(function(){var t;return I(this,(function(r){switch(r.label){case 0:return[4,$.findOne({name:e.params.name}).lean().populate("records","level hertz link levelID")];case 1:return[2,(t=r.sent())?n.status(200).json(t):n.status(404).send("Player not found.")]}}))}))})),D.post("/players",A,_((function(e,n,t){return S(void 0,void 0,void 0,(function(){var n;return I(this,(function(r){switch(r.label){case 0:return[4,$.exists({name:e.body.name})];case 1:if(r.sent())throw 409;return(n=new $({name:e.body.name,points:0,discord:null===e.body.discord?void 0:e.body.discord})).$session(t),[4,n.save()];case 2:return r.sent(),[2,201]}}))}))}))),D.delete("/players/:name",A,_((function(e,n,t){return S(void 0,void 0,void 0,(function(){var n;return I(this,(function(r){switch(r.label){case 0:return[4,$.findOne({name:e.params.name})];case 1:if(null===(n=r.sent()))throw 404;return[4,n.ban(t)];case 2:return r.sent(),[2,200]}}))}))}))),D.patch("/players/:name",A,_((function(e,n,t){return S(void 0,void 0,void 0,(function(){var n;return I(this,(function(r){switch(r.label){case 0:return void 0===e.body.newname?[3,3]:[4,$.findOneAndUpdate({name:e.params.name},{$set:{name:e.body.newname}}).session(t)];case 1:if(null===(n=r.sent()))throw 404;return[4,g.playerNameUpdate(t,n._id,e.body.newname)];case 2:return r.sent(),[2,200];case 3:return void 0===e.body.newdiscord?[3,5]:[4,$.findOneAndUpdate({name:e.params.name},{$set:{discord:e.body.newdiscord}}).session(t)];case 4:if(null===(n=r.sent()))throw 404;return[2,200];case 5:throw 400}}))}))}))),D.post("/records",A,_((function(e,n,t){return S(void 0,void 0,void 0,(function(){var n,r;return I(this,(function(s){switch(s.label){case 0:return[4,$.exists({name:e.body.player})];case 1:return(n=!s.sent())?[3,3]:[4,O.exists({name:e.body.level})];case 2:n=!s.sent(),s.label=3;case 3:if(n)throw 404;if(void 0===e.body.hertz||void 0===e.body.link)throw 400;return(r=new g({player:e.body.player,level:e.body.level,hertz:e.body.hertz,link:e.body.link})).$session(t),[4,r.save()];case 4:return s.sent(),[2,201]}}))}))}))),D.delete("/records",A,_((function(e,n,t){return S(void 0,void 0,void 0,(function(){var n;return I(this,(function(r){switch(r.label){case 0:if(void 0===e.body.player||void 0===e.body.level)throw 400;return[4,g.findOne({player:e.body.player,level:e.body.level})];case 1:if(null===(n=r.sent()))throw 404;return[4,n.cascadingDelete(t,1)];case 2:return r.sent(),[2,200]}}))}))})));try{l().connect(process.env.MONGODB_TEST_URI)}catch(e){console.error(e)}D.listen(j,(function(){console.log("App listening at http://localhost:".concat(j))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,