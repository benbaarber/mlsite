(()=>{"use strict";var e={n:n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},d:(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n)};const n=require("express");var r=e.n(n);const t=require("body-parser");var o=e.n(t);const a=require("dotenv");var c=e.n(a);const i=require("mongoose");var l=e.n(i),s=new(l().Schema)({name:String,link:String,hertz:Number}),u=new(l().Schema)({name:String,creators:String,records:[s]});const f=l().model("levels",u),v=require("path");var p,h=e.n(v);void 0===process.env.MONGODB_URI&&c().config();var d=r()(),b=null!==(p=process.env.PORT)&&void 0!==p?p:3e3;d.use(o().json()),d.use("/",r().static(h().resolve(__dirname,"../client"))),d.get("/levels",(function(e,n){return r=void 0,t=void 0,a=function(){var e;return function(e,n){var r,t,o,a,c={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(i){return function(l){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a&&(a=0,i[0]&&(c=0)),c;)try{if(r=1,t&&(o=2&i[0]?t.return:i[0]?t.throw||((o=t.return)&&o.call(t),0):t.next)&&!(o=o.call(t,i[1])).done)return o;switch(t=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return c.label++,{value:i[1],done:!1};case 5:c.label++,t=i[1],i=[0];continue;case 7:i=c.ops.pop(),c.trys.pop();continue;default:if(!((o=(o=c.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){c=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){c.label=i[1];break}if(6===i[0]&&c.label<o[1]){c.label=o[1],o=i;break}if(o&&c.label<o[2]){c.label=o[2],c.ops.push(i);break}o[2]&&c.ops.pop(),c.trys.pop();continue}i=n.call(e,c)}catch(e){i=[6,e],t=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}}(this,(function(r){switch(r.label){case 0:return[4,f.find()];case 1:return e=r.sent(),[2,n.json(e)]}}))},new((o=void 0)||(o=Promise))((function(e,n){function c(e){try{l(a.next(e))}catch(e){n(e)}}function i(e){try{l(a.throw(e))}catch(e){n(e)}}function l(n){var r;n.done?e(n.value):(r=n.value,r instanceof o?r:new o((function(e){e(r)}))).then(c,i)}l((a=a.apply(r,t||[])).next())}));var r,t,o,a})),l().connect(process.env.MONGODB_URI),d.listen(b,(function(){console.log("App listening at http://localhost:".concat(b))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,