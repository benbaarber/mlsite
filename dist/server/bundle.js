(()=>{"use strict";var e={n:t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};const t=require("express");var n=e.n(t);const r=require("body-parser");var s=e.n(r);const i=require("dotenv");var o=e.n(i);const a=require("cors");var u=e.n(a);const c=require("mongoose");var l=e.n(c);const d=require("path");var p=e.n(d);const v=require("mongoose-lean-virtuals");var f=function(e,t,n,r){return new(n||(n=Promise))((function(s,i){function o(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}u((r=r.apply(e,t||[])).next())}))},h=function(e,t){var n,r,s,i,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(o=0)),o;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},y=function(e,t,n){if(n||2===arguments.length)for(var r,s=0,i=t.length;s<i;s++)!r&&s in t||(r||(r=Array.prototype.slice.call(t,0,s)),r[s]=t[s]);return e.concat(r||Array.prototype.slice.call(t))};l().plugin(v.mongooseLeanVirtuals);var b=new c.Schema({player:{type:String,required:!0},level:{type:String,required:!0},hertz:{type:Number,required:!0},link:{type:String,required:!0},playerID:{type:c.Schema.Types.ObjectId,ref:"Player"},levelID:{type:c.Schema.Types.ObjectId,ref:"Level"}},{statics:{playerNameUpdate:function(e,t,n){return f(this,void 0,void 0,(function(){return h(this,(function(r){switch(r.label){case 0:return[4,this.updateMany({playerID:t},{$set:{player:n}}).session(e)];case 1:return r.sent(),[2]}}))}))},levelNameUpdate:function(e,t,n){return f(this,void 0,void 0,(function(){return h(this,(function(r){switch(r.label){case 0:return[4,this.updateMany({levelID:t},{$set:{level:n}}).session(e)];case 1:return r.sent(),[2]}}))}))}},methods:{cascadingDelete:function(e,t){return f(this,void 0,void 0,(function(){var n;return h(this,(function(r){switch(r.label){case 0:return[4,_.findByIdAndUpdate(this.levelID,{$pull:{records:this._id}}).session(e)];case 1:return n=r.sent(),[4,$.findByIdAndUpdate(this.playerID,{$pull:{records:this._id},$inc:{points:1===t?-(null==n?void 0:n.points):0}}).session(e)];case 2:return r.sent(),[4,this.deleteOne({session:e})];case 3:return r.sent(),[2]}}))}))}}});b.pre("save",(function(){return f(this,void 0,void 0,(function(){var e,t,n;return h(this,(function(r){switch(r.label){case 0:return e=this.$session(),[4,_.findOneAndUpdate({name:this.level},{$addToSet:{records:this._id}},{new:!0}).session(e)];case 1:if(null===(t=r.sent()))throw new Error("Level not found");return[4,$.findOneAndUpdate({name:this.player},{$addToSet:{records:this._id},$inc:{points:t.points}},{new:!0}).session(e)];case 2:if(null===(n=r.sent()))throw new Error("Player not found");return this.playerID=n._id,this.levelID=t._id,[2]}}))}))}));var m,w=new c.Schema({name:{type:String,required:!0},creator:{type:String,required:!0},position:{type:Number,required:!0},records:[{type:c.Schema.Types.ObjectId,ref:"Record"}]},{minimize:!1,toJSON:{virtuals:!0},toObject:{virtuals:!0},virtuals:{points:{get:function(){return this.position<=100?2250/(.37*this.position+9)-40.12:0}}},statics:{levelPoints:function(){return f(this,void 0,void 0,(function(){var e;return h(this,(function(t){switch(t.label){case 0:return[4,this.find({position:{$lte:100}})];case 1:return e=t.sent(),[2,Object.assign.apply(Object,y([{}],e.map((function(e){var t;return(t={})[e._id.toString()]=e.points,t})),!1))]}}))}))}},methods:{add:function(e){return f(this,void 0,void 0,(function(){return h(this,(function(t){switch(t.label){case 0:return[4,_.updateMany({position:{$gte:this.position}},{$inc:{position:1}}).session(e)];case 1:return t.sent(),this.$session(e),[4,$.updateAllPoints(e)];case 2:return t.sent(),[4,this.save()];case 3:return t.sent(),[2]}}))}))},del:function(e){return f(this,void 0,void 0,(function(){var t,n;return h(this,(function(r){switch(r.label){case 0:return[4,_.updateMany({position:{$gt:this.position}},{$inc:{position:-1}}).session(e)];case 1:return r.sent(),[4,this.populate("records")];case 2:r.sent(),t=0,n=this.records,r.label=3;case 3:return t<n.length?[4,n[t].cascadingDelete(e)]:[3,6];case 4:r.sent(),r.label=5;case 5:return t++,[3,3];case 6:return[4,this.deleteOne({session:e})];case 7:return r.sent(),[4,$.updateAllPoints(e)];case 8:return r.sent(),[2]}}))}))},move:function(e,t){return f(this,void 0,void 0,(function(){return h(this,(function(n){switch(n.label){case 0:return this.position>t?[4,_.updateMany({$and:[{position:{$gte:t}},{position:{$lt:this.position}}]},{$inc:{position:1}}).session(e)]:[3,2];case 1:return n.sent(),[3,4];case 2:return this.position<t?[4,_.updateMany({$and:[{position:{$lte:t}},{position:{$gt:this.position}}]},{$inc:{position:-1}}).session(e)]:[3,4];case 3:n.sent(),n.label=4;case 4:return[4,_.findByIdAndUpdate(this._id,{$set:{position:t}}).session(e)];case 5:return n.sent(),[4,$.updateAllPoints(e)];case 6:return n.sent(),[2]}}))}))}}}),g=new c.Schema({name:{type:String,required:!0},points:{type:Number,required:!0,default:0},discord:{type:String},records:[{type:c.Schema.Types.ObjectId,ref:"Record"}]},{minimize:!1,toJSON:{virtuals:!0},toObject:{virtuals:!0},virtuals:{hertz:{get:function(){for(var e={},t=0,n=this.records;t<n.length;t++){var r=n[t];e[r.hertz]=(e[r.hertz]||0)+1}return e}},mclass:{get:function(){var e,t=this,n=[[1,"Legacy"],[50,"Class D"],[150,"Class C"],[300,"Class B"],[600,"Class A"],[1e3,"Class S"],[2e4,"Overlords"]];return(null!==(e=n.find((function(e){return t.points<e[0]})))&&void 0!==e?e:n[0])[1]}}},statics:{updateAllPoints:function(e){return f(this,void 0,void 0,(function(){var t,n,r,s,i,o,a,u;return h(this,(function(c){switch(c.label){case 0:return[4,_.find({position:{$lte:100}},{},{session:e})];case 1:return t=c.sent(),n=Object.assign.apply(Object,y([{}],t.map((function(e){var t;return(t={})[e.id]=e.points,t})),!1)),[4,this.find({},{},{session:e})];case 2:r=c.sent(),s=0,i=r,c.label=3;case 3:return s<i.length?[4,(o=i[s]).getCompletedLevels().then((function(e){return e.map((function(e){return e.id}))}))]:[3,7];case 4:if(a=c.sent(),u=a.map((function(e){var t;return null!==(t=n[e])&&void 0!==t?t:0})).reduce((function(e,t){return e+t}),0),o.points=u,null===o)throw 500;return o.$session(e),[4,o.save()];case 5:c.sent(),c.label=6;case 6:return s++,[3,3];case 7:return[2]}}))}))}},methods:{getCompletedLevels:function(){return f(this,void 0,void 0,(function(){var e,t,n,r,s,i;return h(this,(function(o){switch(o.label){case 0:return[4,this.populate("records","levelID")];case 1:o.sent(),e=[],t=0,n=this.records,o.label=2;case 2:return t<n.length?(r=n[t],i=(s=e).push,[4,_.findById(r.levelID)]):[3,5];case 3:i.apply(s,[o.sent()]),o.label=4;case 4:return t++,[3,2];case 5:return[2,e]}}))}))},updatePoints:function(e){return f(this,void 0,void 0,(function(){var t,n;return h(this,(function(r){switch(r.label){case 0:return[4,this.getCompletedLevels()];case 1:return t=r.sent(),n=t.map((function(e){return e.points})).reduce((function(e,t){return e+t}),0),this.points=n,this.$session(e),[4,this.save()];case 2:return r.sent(),[2]}}))}))},ban:function(e){return f(this,void 0,void 0,(function(){var t,n;return h(this,(function(r){switch(r.label){case 0:return[4,this.populate("records")];case 1:r.sent(),t=0,n=this.records,r.label=2;case 2:return t<n.length?[4,n[t].cascadingDelete(e)]:[3,5];case 3:r.sent(),r.label=4;case 4:return t++,[3,2];case 5:return[4,this.deleteOne({session:e})];case 6:return r.sent(),[2]}}))}))}}}),O=new c.Schema({date:{type:String,required:!0},content:{type:String,required:!0},type:{type:Number,required:!0,min:1,max:3}}),S=(0,c.model)("Record",b),_=(0,c.model)("Level",w),$=(0,c.model)("Player",g),I=(0,c.model)("Log",O),j=function(){return j=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var s in t=arguments[n])Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s]);return e},j.apply(this,arguments)},x=function(e,t,n,r){return new(n||(n=Promise))((function(s,i){function o(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,a)}u((r=r.apply(e,t||[])).next())}))},D=function(e,t){var n,r,s,i,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(u){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(o=0)),o;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}};void 0!==process.env.BOT_TOKEN&&void 0!==process.env.MONGODB_URI||o().config();var q=n()(),T=null!==(m=process.env.PORT)&&void 0!==m?m:3e3;q.set("query parser","simple"),q.use(s().urlencoded({extended:!0})),q.use(s().json()),q.use(u()()),q.use("/",n().static(p().resolve(__dirname,"../client")));var A=function(e,t,n){var r;if(!(null!==(r=e.headers.auth)&&void 0!==r?r:""===process.env.BOT_TOKEN))return t.sendStatus(403);n()},N=function(e){return function(t,n){return x(void 0,void 0,void 0,(function(){var r,s,i,o,a;return D(this,(function(u){switch(u.label){case 0:return[4,l().startSession()];case 1:r=u.sent(),u.label=2;case 2:return u.trys.push([2,5,7,9]),r.startTransaction(),o=(i=n).sendStatus,[4,e(t,n,r)];case 3:return s=o.apply(i,[u.sent()]),[4,r.commitTransaction()];case 4:return u.sent(),[3,9];case 5:return a=u.sent(),[4,r.abortTransaction()];case 6:return u.sent(),s="number"==typeof a?n.sendStatus(a):console.log(a),[3,9];case 7:return[4,r.endSession()];case 8:return u.sent(),[2,s];case 9:return[2]}}))}))}};q.get("/levels",(function(e,t){return x(void 0,void 0,void 0,(function(){var e;return D(this,(function(n){switch(n.label){case 0:return[4,_.find({position:{$lte:100}}).lean({virtuals:!0}).sort("position").select("-_id -__v -records")];case 1:return e=n.sent(),[2,t.status(200).json(e)]}}))}))})),q.get("/levels/:name",(function(e,t){return x(void 0,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,_.findOne({name:e.params.name}).lean({virtuals:!0}).populate("records","-_id -__v -level -levelID -playerID").select("-_id -__v")];case 1:return[2,(n=r.sent())?t.status(200).json(n):t.status(404).send("Level not found.")]}}))}))})),q.post("/levels",A,N((function(e,t,n){return x(void 0,void 0,void 0,(function(){return D(this,(function(t){switch(t.label){case 0:return[4,_.exists({name:e.body.name})];case 1:if(t.sent())throw 409;return[4,new _({name:e.body.name,creator:e.body.creator,position:e.body.position}).add(n)];case 2:return t.sent(),[2,201]}}))}))}))),q.delete("/levels/:name",A,N((function(e,t,n){return x(void 0,void 0,void 0,(function(){var t;return D(this,(function(r){switch(r.label){case 0:return[4,_.findOne({name:e.params.name})];case 1:if(null===(t=r.sent()))throw 404;return[4,t.del(n)];case 2:return r.sent(),[2,200]}}))}))}))),q.patch("/levels/:name",A,N((function(e,t,n){return x(void 0,void 0,void 0,(function(){var t;return D(this,(function(r){switch(r.label){case 0:return void 0===e.body.newpos?[3,3]:[4,_.findOne({name:e.params.name})];case 1:if(null===(t=r.sent()))throw 404;return[4,t.move(n,e.body.newpos)];case 2:case 5:return r.sent(),[2,200];case 3:return void 0===e.body.newname?[3,6]:[4,_.findOneAndUpdate({name:e.params.name},{$set:{name:e.body.newname}}).session(n)];case 4:if(null===(t=r.sent()))throw 404;return[4,S.levelNameUpdate(n,t._id,e.body.newname)];case 6:return void 0===e.body.newcreator?[3,8]:[4,_.findOneAndUpdate({name:e.params.name},{$set:{creator:e.body.newcreator}}).session(n)];case 7:if(null===(t=r.sent()))throw 404;return[2,200];case 8:throw 400}}))}))}))),q.get("/players",(function(e,t){return x(void 0,void 0,void 0,(function(){var e;return D(this,(function(n){switch(n.label){case 0:return[4,$.find({points:{$gt:0}}).lean().sort("-points").select("name points -_id")];case 1:return e=n.sent(),[2,t.status(200).json(e)]}}))}))})),q.get("/players/:name",(function(e,t){return x(void 0,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,$.findOne({name:e.params.name}).lean({virtuals:!0}).populate("records","-_id -__v -player -levelID -playerID").select("-_id -id -__v")];case 1:return[2,(n=r.sent())?t.status(200).json(n):t.status(404).send("Player not found.")]}}))}))})),q.post("/players",A,N((function(e,t,n){return x(void 0,void 0,void 0,(function(){var t;return D(this,(function(r){switch(r.label){case 0:return[4,$.exists({name:e.body.name})];case 1:if(r.sent())throw 409;return(t=new $({name:e.body.name,points:0,discord:null===e.body.discord?void 0:e.body.discord})).$session(n),[4,t.save()];case 2:return r.sent(),[2,201]}}))}))}))),q.delete("/players/:name",A,N((function(e,t,n){return x(void 0,void 0,void 0,(function(){var t;return D(this,(function(r){switch(r.label){case 0:return[4,$.findOne({name:e.params.name})];case 1:if(null===(t=r.sent()))throw 404;return[4,t.ban(n)];case 2:return r.sent(),[2,200]}}))}))}))),q.patch("/players/:name",A,N((function(e,t,n){return x(void 0,void 0,void 0,(function(){var t;return D(this,(function(r){switch(r.label){case 0:return void 0===e.body.newname?[3,3]:[4,$.findOneAndUpdate({name:e.params.name},{$set:{name:e.body.newname}}).session(n)];case 1:if(null===(t=r.sent()))throw 404;return[4,S.playerNameUpdate(n,t._id,e.body.newname)];case 2:return r.sent(),[2,200];case 3:return void 0===e.body.newdiscord?[3,5]:[4,$.findOneAndUpdate({name:e.params.name},{$set:{discord:e.body.newdiscord}}).session(n)];case 4:if(null===(t=r.sent()))throw 404;return[2,200];case 5:throw 400}}))}))}))),q.post("/records",A,N((function(e,t,n){return x(void 0,void 0,void 0,(function(){var t,r;return D(this,(function(s){switch(s.label){case 0:return[4,$.exists({name:e.body.player})];case 1:return(t=!s.sent())?[3,3]:[4,_.exists({name:e.body.level})];case 2:t=!s.sent(),s.label=3;case 3:if(t)throw 404;if(void 0===e.body.hertz||void 0===e.body.link)throw 400;return[4,S.exists({player:e.body.player,level:e.body.level})];case 4:if(s.sent())throw 409;return(r=new S({player:e.body.player,level:e.body.level,hertz:e.body.hertz,link:e.body.link})).$session(n),[4,r.save()];case 5:return s.sent(),[2,201]}}))}))}))),q.delete("/records",A,N((function(e,t,n){return x(void 0,void 0,void 0,(function(){var t;return D(this,(function(r){switch(r.label){case 0:if(void 0===e.body.player||void 0===e.body.level)throw 400;return[4,S.findOne({player:e.body.player,level:e.body.level})];case 1:if(null===(t=r.sent()))throw 404;return[4,t.cascadingDelete(n,1)];case 2:return r.sent(),[2,200]}}))}))}))),q.post("/submit",(function(e,t){return x(void 0,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return n=0,[4,S.exists({player:e.body.player,level:e.body.level})];case 1:return r.sent()?[2,t.sendStatus(409)]:[4,$.exists({name:e.body.player})];case 2:return r.sent()||(n+=1),[4,_.exists({name:e.body.level})];case 3:return r.sent()||(n+=2),[2,fetch("".concat(process.env.BOT_LISTENER_URI,"/submit"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(j(j({},e.body),{isNew:n}))}).then((function(e){return t.sendStatus(e.status)})).catch((function(){return t.sendStatus(503)}))]}}))}))})),q.get("/members",(function(e,t){return x(void 0,void 0,void 0,(function(){var e;return D(this,(function(n){switch(n.label){case 0:return[4,$.find({discord:{$exists:!0}}).lean().sort("-points").select("name discord points -_id")];case 1:return e=n.sent(),[2,t.status(200).json(e)]}}))}))})),q.get("/logs",(function(e,t){return x(void 0,void 0,void 0,(function(){var e;return D(this,(function(n){switch(n.label){case 0:return[4,I.find().lean().select("-__v -_id")];case 1:return e=n.sent(),[2,t.status(200).json(e)]}}))}))})),q.post("/logs",A,(function(e,t){return x(void 0,void 0,void 0,(function(){var n;return D(this,(function(r){switch(r.label){case 0:return[4,(n=new I({date:e.body.date,content:e.body.content,type:e.body.type})).save()];case 1:return r.sent(),[2,t.status(201).json({id:n.id})]}}))}))})),q.patch("/logs/:id",A,(function(e,t){return x(void 0,void 0,void 0,(function(){return D(this,(function(n){switch(n.label){case 0:return[4,I.findByIdAndUpdate(e.params.id,{$set:{content:e.body.content}})];case 1:return[2,n.sent()?t.sendStatus(200):t.sendStatus(404)]}}))}))})),q.delete("/logs/:id",A,(function(e,t){return x(void 0,void 0,void 0,(function(){return D(this,(function(n){switch(n.label){case 0:return[4,I.findByIdAndDelete(e.params.id)];case 1:return[2,n.sent()?t.sendStatus(200):t.sendStatus(404)]}}))}))}));try{l().connect(process.env.MONGODB_URI)}catch(e){console.error(e)}q.listen(T,(function(){console.log("App listening at http://localhost:".concat(T))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,