(()=>{"use strict";var e={n:n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},d:(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n)};const n=require("express");var t=e.n(n);const r=require("body-parser");var s=e.n(r);const i=require("dotenv");var o=e.n(i);const a=require("cors");var u=e.n(a);const c=require("mongoose");var l=e.n(c);const d=require("path");var f=e.n(d),p=function(e,n,t,r){return new(t||(t=Promise))((function(s,i){function o(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var n;e.done?s(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(o,a)}u((r=r.apply(e,n||[])).next())}))},h=function(e,n){var t,r,s,i,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(u){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(o=0)),o;)try{if(t=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=n.call(e,o)}catch(e){a=[6,e],r=0}finally{t=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}},v=new c.Schema({player:{type:String,required:!0},level:{type:String,required:!0},hertz:{type:Number,required:!0},link:{type:String,required:!0},playerID:{type:c.Schema.Types.ObjectId,ref:"Player"},levelID:{type:c.Schema.Types.ObjectId,ref:"Level"}},{statics:{playerNameUpdate:function(e,n,t){return p(this,void 0,void 0,(function(){return h(this,(function(r){switch(r.label){case 0:return[4,this.updateMany({playerID:n},{$set:{player:t}}).session(e)];case 1:return r.sent(),[2]}}))}))},levelNameUpdate:function(e,n,t){return p(this,void 0,void 0,(function(){return h(this,(function(r){switch(r.label){case 0:return[4,this.updateMany({levelID:n},{$set:{level:t}}).session(e)];case 1:return r.sent(),[2]}}))}))}},methods:{cascadingDelete:function(e,n){return p(this,void 0,void 0,(function(){var t;return h(this,(function(r){switch(r.label){case 0:return[4,g.findByIdAndUpdate(this.levelID,{$pull:{records:this._id}}).session(e)];case 1:return t=r.sent(),1!==n?[3,3]:[4,$.findByIdAndUpdate(this.playerID,{$pull:{records:this._id},$inc:{points:-(null==t?void 0:t.points)}}).session(e)];case 2:return r.sent(),[3,5];case 3:return[4,$.findByIdAndUpdate(this.playerID,{$pull:{records:this._id}}).session(e)];case 4:r.sent(),r.label=5;case 5:return[4,this.deleteOne({session:e})];case 6:return r.sent(),[2]}}))}))}}});v.pre("save",(function(){return p(this,void 0,void 0,(function(){var e,n,t;return h(this,(function(r){switch(r.label){case 0:return e=this.$session(),[4,g.findOneAndUpdate({name:this.level},{$addToSet:{records:this._id}},{new:!0}).session(e)];case 1:if(null===(n=r.sent()))throw new Error("Level not found");return[4,$.findOneAndUpdate({name:this.player},{$addToSet:{records:this._id},$inc:{points:n.points}},{new:!0}).session(e)];case 2:if(null===(t=r.sent()))throw new Error("Player not found");return this.playerID=t._id,this.levelID=n._id,[2]}}))}))}));var y=new c.Schema({name:{type:String,required:!0},creator:{type:String,required:!0},position:{type:Number,required:!0},records:[{type:c.Schema.Types.ObjectId,ref:"Record"}]},{minimize:!1,toJSON:{virtuals:!0},toObject:{virtuals:!0},virtuals:{points:{get:function(){return this.position<=100?2250/(.37*this.position+9)-40:0}}},statics:{levelPoints:function(){return p(this,void 0,void 0,(function(){return h(this,(function(e){switch(e.label){case 0:return[4,this.find({position:{$lte:100}})];case 1:return[2,e.sent().map((function(e){return[e._id,e.points]}))]}}))}))}},methods:{add:function(e){return p(this,void 0,void 0,(function(){return h(this,(function(n){switch(n.label){case 0:return[4,g.updateMany({position:{$gte:this.position}},{$inc:{position:1}}).session(e)];case 1:return n.sent(),this.$session(e),[4,this.save()];case 2:return n.sent(),[2]}}))}))},del:function(e){return p(this,void 0,void 0,(function(){var n;return h(this,(function(t){switch(t.label){case 0:return[4,g.updateMany({position:{$gt:this.position}},{$inc:{position:-1}}).session(e)];case 1:return t.sent(),[4,this.populate("records")];case 2:return t.sent(),[4,this.records.forEach((function(n){return n.cascadingDelete(e)}))];case 3:return t.sent(),[4,this.deleteOne({session:e})];case 4:return t.sent(),[4,g.levelPoints()];case 5:return n=t.sent(),[4,$.updateAllPoints(e,n)];case 6:return t.sent(),[2]}}))}))},move:function(e,n){return p(this,void 0,void 0,(function(){var t;return h(this,(function(r){switch(r.label){case 0:return this.position>n?[4,g.updateMany({$and:[{position:{$gte:n}},{position:{$lt:this.position}}]},{$inc:{position:1}}).session(e)]:[3,2];case 1:return r.sent(),[3,4];case 2:return this.position<n?[4,g.updateMany({$and:[{position:{$lte:n}},{position:{$gt:this.position}}]},{$inc:{position:-1}}).session(e)]:[3,4];case 3:r.sent(),r.label=4;case 4:return[4,g.findByIdAndUpdate(this._id,{$set:{position:n}}).session(e)];case 5:return r.sent(),[4,g.levelPoints()];case 6:return t=r.sent(),[4,$.updateAllPoints(e,t)];case 7:return r.sent(),[2]}}))}))}}});y.pre("save",(function(){return p(this,void 0,void 0,(function(){var e,n;return h(this,(function(t){switch(t.label){case 0:return e=this.$session(),[4,g.levelPoints()];case 1:return n=t.sent(),[4,$.updateAllPoints(e,n)];case 2:return t.sent(),[2]}}))}))}));var b,m=new c.Schema({name:{type:String,required:!0},points:{type:Number,required:!0,default:0},discord:{type:String},records:[{type:c.Schema.Types.ObjectId,ref:"Record"}]},{minimize:!1,toJSON:{virtuals:!0},toObject:{virtuals:!0},virtuals:{hertz:{get:function(){return p(this,void 0,void 0,(function(){var e,n,t,r;return h(this,(function(s){switch(s.label){case 0:return[4,this.populate("records","hertz")];case 1:for(s.sent(),e={},n=0,t=this.records;n<t.length;n++)r=t[n],e[r.hertz]=(e[r.hertz]||0)+1;return this.depopulate(),[2,e]}}))}))}},class:{get:function(){var e,n=this,t=[[1,"Legacy"],[50,"Class D"],[150,"Class C"],[300,"Class B"],[600,"Class A"],[1e3,"Class S"],[2e4,"Overlords"]];return(null!==(e=t.find((function(e){return n.points<e[0]})))&&void 0!==e?e:t[0])[1]}}},statics:{updateAllPoints:function(e,n){return p(this,void 0,void 0,(function(){var t,r,s,i,o;return h(this,(function(a){switch(a.label){case 0:return[4,this.find()];case 1:t=a.sent(),r=function(t){var r,s;return h(this,(function(i){switch(i.label){case 0:return[4,t.getCompletedLevels().then((function(e){return e.map((function(e){return e._id}))}))];case 1:if(r=i.sent(),s=n.filter((function(e){return r.includes(e[0])})).reduce((function(e,n){return e+n[1]}),0),t.points=s,null===t)throw 500;return t.$session(e),[4,t.save()];case 2:return i.sent(),[2]}}))},s=0,i=t,a.label=2;case 2:return s<i.length?(o=i[s],[5,r(o)]):[3,5];case 3:a.sent(),a.label=4;case 4:return s++,[3,2];case 5:return[2]}}))}))}},methods:{getCompletedLevels:function(){return p(this,void 0,void 0,(function(){return h(this,(function(e){switch(e.label){case 0:return[4,this.populate("records","levelID")];case 1:return e.sent(),[2,this.records.map((function(e){return g.findById(e.levelID)}))]}}))}))},updatePoints:function(e){return p(this,void 0,void 0,(function(){var n,t;return h(this,(function(r){switch(r.label){case 0:return[4,this.getCompletedLevels()];case 1:return n=r.sent(),t=n.map((function(e){return e.points})).reduce((function(e,n){return e+n}),0),this.points=t,this.$session(e),[4,this.save()];case 2:return r.sent(),[2]}}))}))},ban:function(e){return p(this,void 0,void 0,(function(){var n,t;return h(this,(function(r){switch(r.label){case 0:return[4,this.populate("records")];case 1:r.sent(),n=0,t=this.records,r.label=2;case 2:return n<t.length?[4,t[n].cascadingDelete(e)]:[3,5];case 3:r.sent(),r.label=4;case 4:return n++,[3,2];case 5:return[4,this.deleteOne({session:e})];case 6:return r.sent(),[2]}}))}))}}}),w=(0,c.model)("Record",v),g=(0,c.model)("Level",y),$=(0,c.model)("Player",m),O=function(e,n,t,r){return new(t||(t=Promise))((function(s,i){function o(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var n;e.done?s(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(o,a)}u((r=r.apply(e,n||[])).next())}))},S=function(e,n){var t,r,s,i,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(u){return function(a){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(o=0)),o;)try{if(t=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==a[0]&&2!==a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=n.call(e,o)}catch(e){a=[6,e],r=0}finally{t=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}};o().config();var I=t()(),D=null!==(b=process.env.PORT)&&void 0!==b?b:3e3;I.set("query parser","simple"),I.use(s().urlencoded({extended:!0})),I.use(s().json()),I.use(u()()),I.use("/",t().static(f().resolve(__dirname,"../client")));var _=function(e,n,t){var r;if(!(null!==(r=e.headers.auth)&&void 0!==r?r:""===process.env.BOT_TOKEN))return n.sendStatus(403);t()},P=function(e){return function(n,t){return O(void 0,void 0,void 0,(function(){var r,s,i,o,a;return S(this,(function(u){switch(u.label){case 0:return[4,l().startSession()];case 1:r=u.sent(),u.label=2;case 2:return u.trys.push([2,5,7,9]),r.startTransaction(),o=(i=t).sendStatus,[4,e(n,t,r)];case 3:return s=o.apply(i,[u.sent()]),[4,r.commitTransaction()];case 4:return u.sent(),[3,9];case 5:return a=u.sent(),[4,r.abortTransaction()];case 6:return u.sent(),s="number"==typeof a?t.sendStatus(a):t.sendStatus(500),[3,9];case 7:return[4,r.endSession()];case 8:return u.sent(),[2,s];case 9:return[2]}}))}))}};I.get("/levels",(function(e,n){return O(void 0,void 0,void 0,(function(){var e;return S(this,(function(t){switch(t.label){case 0:return[4,g.find({position:{$lte:100}}).lean().sort("position")];case 1:return e=t.sent(),[2,n.status(200).json(e)]}}))}))})),I.get("/levels/:name",(function(e,n){return O(void 0,void 0,void 0,(function(){var t;return S(this,(function(r){switch(r.label){case 0:return[4,g.findOne({name:e.params.name}).lean().populate("records","player hertz link playerID")];case 1:return t=r.sent(),[2,n.status(200).json(null==t?void 0:t.records)]}}))}))})),I.post("/levels",_,P((function(e,n,t){return O(void 0,void 0,void 0,(function(){return S(this,(function(n){switch(n.label){case 0:return[4,g.exists({name:e.body.name})];case 1:if(n.sent())throw 409;return[4,new g({name:e.body.name,creator:e.body.creator,position:e.body.position}).add(t)];case 2:return n.sent(),[2,201]}}))}))}))),I.delete("/levels/:name",_,P((function(e,n,t){return O(void 0,void 0,void 0,(function(){var n;return S(this,(function(r){switch(r.label){case 0:return[4,g.findOne({name:e.params.name})];case 1:if(null===(n=r.sent()))throw 404;return[4,n.del(t)];case 2:return r.sent(),[2,200]}}))}))}))),I.patch("/levels/:name",_,P((function(e,n,t){return O(void 0,void 0,void 0,(function(){var n;return S(this,(function(r){switch(r.label){case 0:return void 0===e.body.newpos?[3,3]:[4,g.findOne({name:e.params.name})];case 1:if(null===(n=r.sent()))throw 404;return[4,n.move(t,e.body.newpos)];case 2:case 5:return r.sent(),[2,200];case 3:return void 0===e.body.newname?[3,6]:[4,g.findOneAndUpdate({name:e.params.name},{$set:{name:e.body.newname}}).session(t)];case 4:if(null===(n=r.sent()))throw 404;return[4,w.levelNameUpdate(t,n._id,e.body.newname)];case 6:return void 0===e.body.newcreator?[3,8]:[4,g.findOneAndUpdate({name:e.params.name},{$set:{creator:e.body.newcreator}}).session(t)];case 7:if(null===(n=r.sent()))throw 404;return[2,200];case 8:throw 400}}))}))}))),I.get("/players",(function(e,n){return O(void 0,void 0,void 0,(function(){var e;return S(this,(function(t){switch(t.label){case 0:return[4,$.find({points:{$gt:0}}).select("name points").lean().sort("-points")];case 1:return e=t.sent(),[2,n.status(200).json(e)]}}))}))})),I.get("/players/:name",(function(e,n){return O(void 0,void 0,void 0,(function(){var t;return S(this,(function(r){switch(r.label){case 0:return[4,$.findOne({name:e.params.name}).lean().populate("records","level hertz link levelID")];case 1:return[2,(t=r.sent())?n.status(200).json(t):n.status(404).send("Player not found.")]}}))}))})),I.post("/players",_,P((function(e,n,t){return O(void 0,void 0,void 0,(function(){var n;return S(this,(function(r){switch(r.label){case 0:return[4,$.exists({name:e.body.name})];case 1:if(r.sent())throw 409;return(n=new $({name:e.body.name,points:0,discord:null===e.body.discord?void 0:e.body.discord})).$session(t),[4,n.save()];case 2:return r.sent(),[2,201]}}))}))}))),I.delete("/players/:name",_,P((function(e,n,t){return O(void 0,void 0,void 0,(function(){var n;return S(this,(function(r){switch(r.label){case 0:return[4,$.findOne({name:e.params.name})];case 1:if(null===(n=r.sent()))throw 404;return[4,n.ban(t)];case 2:return r.sent(),[2,200]}}))}))}))),I.patch("/players/:name",_,P((function(e,n,t){return O(void 0,void 0,void 0,(function(){var n;return S(this,(function(r){switch(r.label){case 0:return void 0===e.body.newname?[3,3]:[4,$.findOneAndUpdate({name:e.params.name},{$set:{name:e.body.newname}}).session(t)];case 1:if(null===(n=r.sent()))throw 404;return[4,w.playerNameUpdate(t,n._id,e.body.newname)];case 2:return r.sent(),[2,200];case 3:return void 0===e.body.newdiscord?[3,5]:[4,$.findOneAndUpdate({name:e.params.name},{$set:{discord:e.body.newdiscord}}).session(t)];case 4:if(null===(n=r.sent()))throw 404;return[2,200];case 5:throw 400}}))}))}))),I.post("/records",_,P((function(e,n,t){return O(void 0,void 0,void 0,(function(){var n,r;return S(this,(function(s){switch(s.label){case 0:return[4,$.exists({name:e.body.player})];case 1:return(n=!s.sent())?[3,3]:[4,g.exists({name:e.body.level})];case 2:n=!s.sent(),s.label=3;case 3:if(n)throw 404;if(void 0===e.body.hertz||void 0===e.body.link)throw 400;return(r=new w({player:e.body.player,level:e.body.level,hertz:e.body.hertz,link:e.body.link})).$session(t),[4,r.save()];case 4:return s.sent(),[2,201]}}))}))}))),I.delete("/records",_,P((function(e,n,t){return O(void 0,void 0,void 0,(function(){var n;return S(this,(function(r){switch(r.label){case 0:if(void 0===e.body.player||void 0===e.body.level)throw 400;return[4,w.findOne({player:e.body.player,level:e.body.level})];case 1:if(null===(n=r.sent()))throw 404;return[4,n.cascadingDelete(t,1)];case 2:return r.sent(),[2,200]}}))}))})));try{l().connect(process.env.MONGODB_TEST_URI)}catch(e){console.error(e)}I.listen(D,(function(){console.log("App listening at http://localhost:".concat(D))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtQkFDQSxJQUFJQSxFQUFzQixDQ0ExQkEsRUFBeUJDLElBQ3hCLElBQUlDLEVBQVNELEdBQVVBLEVBQU9FLFdBQzdCLElBQU9GLEVBQWlCLFFBQ3hCLElBQU0sRUFFUCxPQURBRCxFQUFvQkksRUFBRUYsRUFBUSxDQUFFRyxFQUFHSCxJQUM1QkEsQ0FBTSxFQ0xkRixFQUF3QixDQUFDTSxFQUFTQyxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hQLEVBQW9CUyxFQUFFRixFQUFZQyxLQUFTUixFQUFvQlMsRUFBRUgsRUFBU0UsSUFDNUVFLE9BQU9DLGVBQWVMLEVBQVNFLEVBQUssQ0FBRUksWUFBWSxFQUFNQyxJQUFLTixFQUFXQyxJQUUxRSxFQ05EUixFQUF3QixDQUFDYyxFQUFLQyxJQUFVTCxPQUFPTSxVQUFVQyxlQUFlQyxLQUFLSixFQUFLQyxJQ0FsRixNQUFNLEVBQStCSSxRQUFRLFcsYUNBN0MsTUFBTSxFQUErQkEsUUFBUSxlLGFDQTdDLE1BQU0sRUFBK0JBLFFBQVEsVSxhQ0E3QyxNQUFNLEVBQStCQSxRQUFRLFEsYUNBN0MsTUFBTSxFQUErQkEsUUFBUSxZLGFDQTdDLE1BQU0sRUFBK0JBLFFBQVEsUSxhQ0F6Q0MsRUFBd0MsU0FBVUMsRUFBU0MsRUFBWUMsRUFBR0MsR0FFMUUsT0FBTyxJQUFLRCxJQUFNQSxFQUFJRSxXQUFVLFNBQVVDLEVBQVNDLEdBQy9DLFNBQVNDLEVBQVVDLEdBQVMsSUFBTUMsRUFBS04sRUFBVU8sS0FBS0YsR0FBa0MsQ0FBdkIsTUFBT0csR0FBS0wsRUFBT0ssRUFBSSxDQUFFLENBQzFGLFNBQVNDLEVBQVNKLEdBQVMsSUFBTUMsRUFBS04sRUFBaUIsTUFBRUssR0FBa0MsQ0FBdkIsTUFBT0csR0FBS0wsRUFBT0ssRUFBSSxDQUFFLENBQzdGLFNBQVNGLEVBQUtJLEdBSmxCLElBQWVMLEVBSWFLLEVBQU9DLEtBQU9ULEVBQVFRLEVBQU9MLFFBSjFDQSxFQUl5REssRUFBT0wsTUFKaERBLGFBQWlCTixFQUFJTSxFQUFRLElBQUlOLEdBQUUsU0FBVUcsR0FBV0EsRUFBUUcsRUFBUSxLQUlqQk8sS0FBS1IsRUFBV0ssRUFBVyxDQUM3R0gsR0FBTU4sRUFBWUEsRUFBVWEsTUFBTWhCLEVBQVNDLEdBQWMsS0FBS1MsT0FDbEUsR0FDSixFQUNJTyxFQUE0QyxTQUFVakIsRUFBU2tCLEdBQy9ELElBQXNHQyxFQUFHQyxFQUFHQyxFQUFHQyxFQUEzR0MsRUFBSSxDQUFFQyxNQUFPLEVBQUdDLEtBQU0sV0FBYSxHQUFXLEVBQVBKLEVBQUUsR0FBUSxNQUFNQSxFQUFFLEdBQUksT0FBT0EsRUFBRSxFQUFJLEVBQUdLLEtBQU0sR0FBSUMsSUFBSyxJQUNoRyxPQUFPTCxFQUFJLENBQUVaLEtBQU1rQixFQUFLLEdBQUksTUFBU0EsRUFBSyxHQUFJLE9BQVVBLEVBQUssSUFBd0IsbUJBQVhDLFNBQTBCUCxFQUFFTyxPQUFPQyxVQUFZLFdBQWEsT0FBT0MsSUFBTSxHQUFJVCxFQUN2SixTQUFTTSxFQUFLSSxHQUFLLE9BQU8sU0FBVUMsR0FBSyxPQUN6QyxTQUFjQyxHQUNWLEdBQUlmLEVBQUcsTUFBTSxJQUFJZ0IsVUFBVSxtQ0FDM0IsS0FBT2IsSUFBTUEsRUFBSSxFQUFHWSxFQUFHLEtBQU9YLEVBQUksSUFBS0EsT0FDbkMsR0FBSUosRUFBSSxFQUFHQyxJQUFNQyxFQUFZLEVBQVJhLEVBQUcsR0FBU2QsRUFBVSxPQUFJYyxFQUFHLEdBQUtkLEVBQVMsU0FBT0MsRUFBSUQsRUFBVSxTQUFNQyxFQUFFeEIsS0FBS3VCLEdBQUksR0FBS0EsRUFBRVYsU0FBV1csRUFBSUEsRUFBRXhCLEtBQUt1QixFQUFHYyxFQUFHLEtBQUtwQixLQUFNLE9BQU9PLEVBRTNKLE9BRElELEVBQUksRUFBR0MsSUFBR2EsRUFBSyxDQUFTLEVBQVJBLEVBQUcsR0FBUWIsRUFBRWIsUUFDekIwQixFQUFHLElBQ1AsS0FBSyxFQUFHLEtBQUssRUFBR2IsRUFBSWEsRUFBSSxNQUN4QixLQUFLLEVBQWMsT0FBWFgsRUFBRUMsUUFBZ0IsQ0FBRWhCLE1BQU8wQixFQUFHLEdBQUlwQixNQUFNLEdBQ2hELEtBQUssRUFBR1MsRUFBRUMsUUFBU0osRUFBSWMsRUFBRyxHQUFJQSxFQUFLLENBQUMsR0FBSSxTQUN4QyxLQUFLLEVBQUdBLEVBQUtYLEVBQUVJLElBQUlTLE1BQU9iLEVBQUVHLEtBQUtVLE1BQU8sU0FDeEMsUUFDSSxNQUFrQmYsR0FBWkEsRUFBSUUsRUFBRUcsTUFBWVcsT0FBUyxHQUFLaEIsRUFBRUEsRUFBRWdCLE9BQVMsS0FBa0IsSUFBVkgsRUFBRyxJQUFzQixJQUFWQSxFQUFHLElBQVcsQ0FBRVgsRUFBSSxFQUFHLFFBQVUsQ0FDM0csR0FBYyxJQUFWVyxFQUFHLE1BQWNiLEdBQU1hLEVBQUcsR0FBS2IsRUFBRSxJQUFNYSxFQUFHLEdBQUtiLEVBQUUsSUFBTSxDQUFFRSxFQUFFQyxNQUFRVSxFQUFHLEdBQUksS0FBTyxDQUNyRixHQUFjLElBQVZBLEVBQUcsSUFBWVgsRUFBRUMsTUFBUUgsRUFBRSxHQUFJLENBQUVFLEVBQUVDLE1BQVFILEVBQUUsR0FBSUEsRUFBSWEsRUFBSSxLQUFPLENBQ3BFLEdBQUliLEdBQUtFLEVBQUVDLE1BQVFILEVBQUUsR0FBSSxDQUFFRSxFQUFFQyxNQUFRSCxFQUFFLEdBQUlFLEVBQUVJLElBQUlXLEtBQUtKLEdBQUssS0FBTyxDQUM5RGIsRUFBRSxJQUFJRSxFQUFFSSxJQUFJUyxNQUNoQmIsRUFBRUcsS0FBS1UsTUFBTyxTQUV0QkYsRUFBS2hCLEVBQUtyQixLQUFLRyxFQUFTdUIsR0FDMUIsTUFBT1osR0FBS3VCLEVBQUssQ0FBQyxFQUFHdkIsR0FBSVMsRUFBSSxDQUFHLENBQUUsUUFBVUQsRUFBSUUsRUFBSSxDQUFHLENBQ3pELEdBQVksRUFBUmEsRUFBRyxHQUFRLE1BQU1BLEVBQUcsR0FBSSxNQUFPLENBQUUxQixNQUFPMEIsRUFBRyxHQUFLQSxFQUFHLFFBQUssRUFBUXBCLE1BQU0sRUFDOUUsQ0F0QmdETCxDQUFLLENBQUN1QixFQUFHQyxHQUFLLENBQUcsQ0F1QnJFLEVBRUlNLEVBQWUsSUFBSSxFQUFBQyxPQUFPLENBQzFCQyxPQUFRLENBQUVDLEtBQU1DLE9BQVFDLFVBQVUsR0FDbENDLE1BQU8sQ0FBRUgsS0FBTUMsT0FBUUMsVUFBVSxHQUNqQ0UsTUFBTyxDQUFFSixLQUFNSyxPQUFRSCxVQUFVLEdBQ2pDSSxLQUFNLENBQUVOLEtBQU1DLE9BQVFDLFVBQVUsR0FDaENLLFNBQVUsQ0FBRVAsS0FBTSxFQUFBRixPQUFBLGVBQXVCVSxJQUFLLFVBQzlDQyxRQUFTLENBQUVULEtBQU0sRUFBQUYsT0FBQSxlQUF1QlUsSUFBSyxVQUM5QyxDQUNDRSxRQUFTLENBQ0xDLGlCQUFrQixTQUFVQyxFQUFTQyxFQUFJQyxHQUNyQyxPQUFPekQsRUFBVWdDLFVBQU0sT0FBUSxHQUFRLFdBQ25DLE9BQU9kLEVBQVljLE1BQU0sU0FBVTBCLEdBQy9CLE9BQVFBLEVBQUdqQyxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBR08sS0FBSzJCLFdBQVcsQ0FBRVQsU0FBVU0sR0FBTSxDQUFFSSxLQUFNLENBQUVsQixPQUFRZSxLQUFhRixRQUFRQSxJQUM1RixLQUFLLEVBRUQsT0FEQUcsRUFBR2hDLE9BQ0ksQ0FBQyxHQUVwQixHQUNKLEdBQ0osRUFDQW1DLGdCQUFpQixTQUFVTixFQUFTQyxFQUFJQyxHQUNwQyxPQUFPekQsRUFBVWdDLFVBQU0sT0FBUSxHQUFRLFdBQ25DLE9BQU9kLEVBQVljLE1BQU0sU0FBVTBCLEdBQy9CLE9BQVFBLEVBQUdqQyxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBR08sS0FBSzJCLFdBQVcsQ0FBRVAsUUFBU0ksR0FBTSxDQUFFSSxLQUFNLENBQUVkLE1BQU9XLEtBQWFGLFFBQVFBLElBQzFGLEtBQUssRUFFRCxPQURBRyxFQUFHaEMsT0FDSSxDQUFDLEdBRXBCLEdBQ0osR0FDSixHQUVKb0MsUUFBUyxDQUNMQyxnQkFBaUIsU0FBVVIsRUFBU1MsR0FDaEMsT0FBT2hFLEVBQVVnQyxVQUFNLE9BQVEsR0FBUSxXQUNuQyxJQUFJYyxFQUNKLE9BQU81QixFQUFZYyxNQUFNLFNBQVUwQixHQUMvQixPQUFRQSxFQUFHakMsT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQUd3QyxFQUFNQyxrQkFBa0JsQyxLQUFLb0IsUUFBUyxDQUNqRGUsTUFBTyxDQUFFQyxRQUFTcEMsS0FBS3FDLE9BQ3hCZCxRQUFRQSxJQUNmLEtBQUssRUFFRCxPQURBVCxFQUFRWSxFQUFHaEMsT0FDTyxJQUFac0MsRUFBdUIsQ0FBQyxFQUFHLEdBQzFCLENBQUMsRUFBR00sRUFBT0osa0JBQWtCbEMsS0FBS2tCLFNBQVUsQ0FDM0NpQixNQUFPLENBQUVDLFFBQVNwQyxLQUFLcUMsS0FDdkJFLEtBQU0sQ0FBRUMsU0FBVTFCLGFBQXFDLEVBQVNBLEVBQU0wQixXQUN2RWpCLFFBQVFBLElBQ25CLEtBQUssRUFFRCxPQURBRyxFQUFHaEMsT0FDSSxDQUFDLEVBQUcsR0FDZixLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQUc0QyxFQUFPSixrQkFBa0JsQyxLQUFLa0IsU0FBVSxDQUNuRGlCLE1BQU8sQ0FBRUMsUUFBU3BDLEtBQUtxQyxPQUN4QmQsUUFBUUEsSUFDZixLQUFLLEVBQ0RHLEVBQUdoQyxPQUNIZ0MsRUFBR2pDLE1BQVEsRUFDZixLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQUdPLEtBQUt5QyxVQUFVLENBQUVsQixRQUFTQSxLQUM3QyxLQUFLLEVBRUQsT0FEQUcsRUFBR2hDLE9BQ0ksQ0FBQyxHQUVwQixHQUNKLEdBQ0osS0FHUmMsRUFBYWtDLElBQUksUUFBUSxXQUNyQixPQUFPMUUsRUFBVWdDLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUl1QixFQUFTVCxFQUFPSixFQUNwQixPQUFPeEIsRUFBWWMsTUFBTSxTQUFVMEIsR0FDL0IsT0FBUUEsRUFBR2pDLE9BQ1AsS0FBSyxFQUVELE9BREE4QixFQUFVdkIsS0FBSzJDLFdBQ1IsQ0FBQyxFQUFHVixFQUFNVyxpQkFBaUIsQ0FBRUMsS0FBTTdDLEtBQUtjLE9BQVMsQ0FBRWdDLFVBQVcsQ0FBRVYsUUFBU3BDLEtBQUtxQyxNQUFTLENBQUVVLEtBQUssSUFBUXhCLFFBQVFBLElBQ3pILEtBQUssRUFFRCxHQUFjLFFBRGRULEVBQVFZLEVBQUdoQyxRQUVQLE1BQU0sSUFBSXNELE1BQU0sbUJBQ3BCLE1BQU8sQ0FBQyxFQUFHVixFQUFPTSxpQkFBaUIsQ0FBRUMsS0FBTTdDLEtBQUtVLFFBQVUsQ0FDbERvQyxVQUFXLENBQUVWLFFBQVNwQyxLQUFLcUMsS0FDM0JFLEtBQU0sQ0FBRUMsT0FBUTFCLEVBQU0wQixTQUN2QixDQUFFTyxLQUFLLElBQVF4QixRQUFRQSxJQUNsQyxLQUFLLEVBRUQsR0FBZSxRQURmYixFQUFTZ0IsRUFBR2hDLFFBRVIsTUFBTSxJQUFJc0QsTUFBTSxvQkFHcEIsT0FGQWhELEtBQUtrQixTQUFXUixFQUFPMkIsSUFDdkJyQyxLQUFLb0IsUUFBVU4sRUFBTXVCLElBQ2QsQ0FBQyxHQUVwQixHQUNKLEdBQ0osSUFDQSxJQUFJWSxFQUFjLElBQUksRUFBQXhDLE9BQU8sQ0FDekJvQyxLQUFNLENBQUVsQyxLQUFNQyxPQUFRQyxVQUFVLEdBQ2hDcUMsUUFBUyxDQUFFdkMsS0FBTUMsT0FBUUMsVUFBVSxHQUNuQ3NDLFNBQVUsQ0FBRXhDLEtBQU1LLE9BQVFILFVBQVUsR0FDcEN1QixRQUFTLENBQUMsQ0FBRXpCLEtBQU0sRUFBQUYsT0FBQSxlQUF1QlUsSUFBSyxZQUMvQyxDQUNDaUMsVUFBVSxFQUNWQyxPQUFRLENBQUVDLFVBQVUsR0FDcEJDLFNBQVUsQ0FBRUQsVUFBVSxHQUN0QkEsU0FBVSxDQUNOZCxPQUFRLENBQ0ovRSxJQUFLLFdBQ0QsT0FBT3VDLEtBQUttRCxVQUFZLElBQ2xCLE1BQVEsSUFBT25ELEtBQUttRCxTQUFXLEdBQUssR0FDcEMsQ0FDVixJQUdSOUIsUUFBUyxDQUNMbUMsWUFBYSxXQUNULE9BQU94RixFQUFVZ0MsVUFBTSxPQUFRLEdBQVEsV0FFbkMsT0FBT2QsRUFBWWMsTUFBTSxTQUFVMEIsR0FDL0IsT0FBUUEsRUFBR2pDLE9BQ1AsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFHTyxLQUFLeUQsS0FBSyxDQUFFTixTQUFVLENBQUVPLEtBQU0sUUFDakQsS0FBSyxFQUVELE1BQU8sQ0FBQyxFQURDaEMsRUFBR2hDLE9BQ01pRSxLQUFJLFNBQVVDLEdBQUssTUFBTyxDQUFDQSxFQUFFdkIsSUFBS3VCLEVBQUVwQixPQUFTLEtBRTNFLEdBQ0osR0FDSixHQUVKVixRQUFTLENBQ0wrQixJQUFLLFNBQVV0QyxHQUNYLE9BQU92RCxFQUFVZ0MsVUFBTSxPQUFRLEdBQVEsV0FDbkMsT0FBT2QsRUFBWWMsTUFBTSxTQUFVMEIsR0FDL0IsT0FBUUEsRUFBR2pDLE9BQ1AsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFHd0MsRUFBTU4sV0FBVyxDQUFFd0IsU0FBVSxDQUFFVyxLQUFNOUQsS0FBS21ELFdBQWMsQ0FBRVosS0FBTSxDQUFFWSxTQUFVLEtBQU81QixRQUFRQSxJQUM5RyxLQUFLLEVBR0QsT0FGQUcsRUFBR2hDLE9BQ0hNLEtBQUsyQyxTQUFTcEIsR0FDUCxDQUFDLEVBQUd2QixLQUFLK0QsUUFDcEIsS0FBSyxFQUVELE9BREFyQyxFQUFHaEMsT0FDSSxDQUFDLEdBRXBCLEdBQ0osR0FDSixFQUNBc0UsSUFBSyxTQUFVekMsR0FDWCxPQUFPdkQsRUFBVWdDLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUlpRSxFQUNKLE9BQU8vRSxFQUFZYyxNQUFNLFNBQVUwQixHQUMvQixPQUFRQSxFQUFHakMsT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQUd3QyxFQUFNTixXQUFXLENBQUV3QixTQUFVLENBQUVlLElBQUtsRSxLQUFLbUQsV0FBYyxDQUFFWixLQUFNLENBQUVZLFVBQVcsS0FBTzVCLFFBQVFBLElBQzlHLEtBQUssRUFFRCxPQURBRyxFQUFHaEMsT0FDSSxDQUFDLEVBQUdNLEtBQUttRSxTQUFTLFlBQzdCLEtBQUssRUFFRCxPQURBekMsRUFBR2hDLE9BQ0ksQ0FBQyxFQUFHTSxLQUFLb0MsUUFBUWdDLFNBQVEsU0FBVUMsR0FDbEMsT0FBT0EsRUFBRXRDLGdCQUFnQlIsRUFDN0IsS0FDUixLQUFLLEVBRUQsT0FEQUcsRUFBR2hDLE9BQ0ksQ0FBQyxFQUFHTSxLQUFLeUMsVUFBVSxDQUFFbEIsUUFBU0EsS0FDekMsS0FBSyxFQUVELE9BREFHLEVBQUdoQyxPQUNJLENBQUMsRUFBR3VDLEVBQU11QixlQUNyQixLQUFLLEVBRUQsT0FEQVMsRUFBS3ZDLEVBQUdoQyxPQUNELENBQUMsRUFBRzRDLEVBQU9nQyxnQkFBZ0IvQyxFQUFTMEMsSUFDL0MsS0FBSyxFQUVELE9BREF2QyxFQUFHaEMsT0FDSSxDQUFDLEdBRXBCLEdBQ0osR0FDSixFQUNBNkUsS0FBTSxTQUFVaEQsRUFBU2lELEdBQ3JCLE9BQU94RyxFQUFVZ0MsVUFBTSxPQUFRLEdBQVEsV0FDbkMsSUFBSWlFLEVBQ0osT0FBTy9FLEVBQVljLE1BQU0sU0FBVTBCLEdBQy9CLE9BQVFBLEVBQUdqQyxPQUNQLEtBQUssRUFDRCxPQUFNTyxLQUFLbUQsU0FBV3FCLEVBQ2YsQ0FBQyxFQUFHdkMsRUFBTU4sV0FBVyxDQUNwQjhDLEtBQU0sQ0FDRixDQUFFdEIsU0FBVSxDQUFFVyxLQUFNVSxJQUNwQixDQUFFckIsU0FBVSxDQUFFdUIsSUFBSzFFLEtBQUttRCxhQUU3QixDQUFFWixLQUFNLENBQUVZLFNBQVUsS0FBTzVCLFFBQVFBLElBTlAsQ0FBQyxFQUFHLEdBTzNDLEtBQUssRUFFRCxPQURBRyxFQUFHaEMsT0FDSSxDQUFDLEVBQUcsR0FDZixLQUFLLEVBQ0QsT0FBTU0sS0FBS21ELFNBQVdxQixFQUNmLENBQUMsRUFBR3ZDLEVBQU1OLFdBQVcsQ0FDcEI4QyxLQUFNLENBQ0YsQ0FBRXRCLFNBQVUsQ0FBRU8sS0FBTWMsSUFDcEIsQ0FBRXJCLFNBQVUsQ0FBRWUsSUFBS2xFLEtBQUttRCxhQUU3QixDQUFFWixLQUFNLENBQUVZLFVBQVcsS0FBTzVCLFFBQVFBLElBTlIsQ0FBQyxFQUFHLEdBTzNDLEtBQUssRUFDREcsRUFBR2hDLE9BQ0hnQyxFQUFHakMsTUFBUSxFQUNmLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBR3dDLEVBQU1DLGtCQUFrQmxDLEtBQUtxQyxJQUFLLENBQzdDVCxLQUFNLENBQUV1QixTQUFVcUIsS0FDbkJqRCxRQUFRQSxJQUNmLEtBQUssRUFFRCxPQURBRyxFQUFHaEMsT0FDSSxDQUFDLEVBQUd1QyxFQUFNdUIsZUFDckIsS0FBSyxFQUVELE9BREFTLEVBQUt2QyxFQUFHaEMsT0FDRCxDQUFDLEVBQUc0QyxFQUFPZ0MsZ0JBQWdCL0MsRUFBUzBDLElBQy9DLEtBQUssRUFFRCxPQURBdkMsRUFBR2hDLE9BQ0ksQ0FBQyxHQUVwQixHQUNKLEdBQ0osS0FHUnVELEVBQVlQLElBQUksUUFBUSxXQUNwQixPQUFPMUUsRUFBVWdDLFVBQU0sT0FBUSxHQUFRLFdBQ25DLElBQUl1QixFQUFTMEMsRUFDYixPQUFPL0UsRUFBWWMsTUFBTSxTQUFVMEIsR0FDL0IsT0FBUUEsRUFBR2pDLE9BQ1AsS0FBSyxFQUVELE9BREE4QixFQUFVdkIsS0FBSzJDLFdBQ1IsQ0FBQyxFQUFHVixFQUFNdUIsZUFDckIsS0FBSyxFQUVELE9BREFTLEVBQUt2QyxFQUFHaEMsT0FDRCxDQUFDLEVBQUc0QyxFQUFPZ0MsZ0JBQWdCL0MsRUFBUzBDLElBQy9DLEtBQUssRUFFRCxPQURBdkMsRUFBR2hDLE9BQ0ksQ0FBQyxHQUVwQixHQUNKLEdBQ0osSUFDQSxJQ2hQSWdDLEVEZ1BBaUQsRUFBZSxJQUFJLEVBQUFsRSxPQUFPLENBQzFCb0MsS0FBTSxDQUFFbEMsS0FBTUMsT0FBUUMsVUFBVSxHQUNoQzJCLE9BQVEsQ0FBRTdCLEtBQU1LLE9BQVFILFVBQVUsRUFBTStELFFBQVMsR0FDakRDLFFBQVMsQ0FBRWxFLEtBQU1DLFFBQ2pCd0IsUUFBUyxDQUFDLENBQUV6QixLQUFNLEVBQUFGLE9BQUEsZUFBdUJVLElBQUssWUFDL0MsQ0FDQ2lDLFVBQVUsRUFDVkMsT0FBUSxDQUFFQyxVQUFVLEdBQ3BCQyxTQUFVLENBQUVELFVBQVUsR0FDdEJBLFNBQVUsQ0FDTnZDLE1BQU8sQ0FDSHRELElBQUssV0FDRCxPQUFPTyxFQUFVZ0MsVUFBTSxPQUFRLEdBQVEsV0FDbkMsSUFBSThFLEVBQUtDLEVBQUlyRCxFQUFJMkMsRUFDakIsT0FBT25GLEVBQVljLE1BQU0sU0FBVWdGLEdBQy9CLE9BQVFBLEVBQUd2RixPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBR08sS0FBS21FLFNBQVMsVUFBVyxVQUM1QyxLQUFLLEVBR0QsSUFGQWEsRUFBR3RGLE9BQ0hvRixFQUFNLENBQUMsRUFDRkMsRUFBSyxFQUFHckQsRUFBSzFCLEtBQUtvQyxRQUFTMkMsRUFBS3JELEVBQUdwQixPQUFReUUsSUFDNUNWLEVBQUkzQyxFQUFHcUQsR0FDUEQsRUFBSVQsRUFBRXRELFFBQVUrRCxFQUFJVCxFQUFFdEQsUUFBVSxHQUFLLEVBR3pDLE9BREFmLEtBQUtpRixhQUNFLENBQUMsRUFBR0gsR0FFdkIsR0FDSixHQUNKLEdBRUpJLE1BQU8sQ0FDSHpILElBQUssV0FDRCxJQUNJaUUsRUFEQXlELEVBQVFuRixLQUVSb0YsRUFBVSxDQUNWLENBQUMsRUFBRyxVQUNKLENBQUMsR0FBSSxXQUNMLENBQUMsSUFBSyxXQUNOLENBQUMsSUFBSyxXQUNOLENBQUMsSUFBSyxXQUNOLENBQUMsSUFBTSxXQUNQLENBQUMsSUFBTyxjQUVaLE9BQThFLFFBQXJFMUQsRUFBSzBELEVBQVEzQixNQUFLLFNBQVU0QixHQUFLLE9BQU9GLEVBQU0zQyxPQUFTNkMsRUFBRSxFQUFJLFdBQXVCLElBQVAzRCxFQUFnQkEsRUFBSzBELEVBQVEsSUFBSSxFQUMzSCxJQUdSL0QsUUFBUyxDQUNMaUQsZ0JBQWlCLFNBQVUvQyxFQUFTMEMsR0FDaEMsT0FBT2pHLEVBQVVnQyxVQUFNLE9BQVEsR0FBUSxXQUNuQyxJQUFJc0YsRUFBU0MsRUFBU1IsRUFBSVMsRUFBV0MsRUFDckMsT0FBT3ZHLEVBQVljLE1BQU0sU0FBVTBCLEdBQy9CLE9BQVFBLEVBQUdqQyxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBR08sS0FBS3lELFFBQ3hCLEtBQUssRUFDRDZCLEVBQVU1RCxFQUFHaEMsT0FDYjZGLEVBQVUsU0FBVUUsR0FDaEIsSUFBSUMsRUFBVWxELEVBQ2QsT0FBT3RELEVBQVljLE1BQU0sU0FBVWdGLEdBQy9CLE9BQVFBLEVBQUd2RixPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBR2dHLEVBQ1ZFLHFCQUNBM0csTUFBSyxTQUFVNEcsR0FBVSxPQUFPQSxFQUFPakMsS0FBSSxTQUFVQyxHQUFLLE9BQU9BLEVBQUV2QixHQUFLLEdBQUksS0FDckYsS0FBSyxFQU1ELEdBTEFxRCxFQUFXVixFQUFHdEYsT0FDZDhDLEVBQVN5QixFQUNKNEIsUUFBTyxTQUFVakgsR0FBSyxPQUFPOEcsRUFBU0ksU0FBU2xILEVBQUUsR0FBSyxJQUN0RG1ILFFBQU8sU0FBVTlJLEVBQUcrSSxHQUFLLE9BQU8vSSxFQUFJK0ksRUFBRSxFQUFJLEdBQUcsR0FDbERQLEVBQUVqRCxPQUFTQSxFQUNELE9BQU5pRCxFQUNBLE1BQU0sSUFFVixPQURBQSxFQUFFOUMsU0FBU3BCLEdBQ0osQ0FBQyxFQUFHa0UsRUFBRTFCLFFBQ2pCLEtBQUssRUFFRCxPQURBaUIsRUFBR3RGLE9BQ0ksQ0FBQyxHQUVwQixHQUNKLEVBQ0FxRixFQUFLLEVBQUdTLEVBQVlGLEVBQ3BCNUQsRUFBR2pDLE1BQVEsRUFDZixLQUFLLEVBQ0QsT0FBTXNGLEVBQUtTLEVBQVVsRixRQUNyQm1GLEVBQUlELEVBQVVULEdBQ1AsQ0FBQyxFQUFHUSxFQUFRRSxLQUZrQixDQUFDLEVBQUcsR0FHN0MsS0FBSyxFQUNEL0QsRUFBR2hDLE9BQ0hnQyxFQUFHakMsTUFBUSxFQUNmLEtBQUssRUFFRCxPQURBc0YsSUFDTyxDQUFDLEVBQUcsR0FDZixLQUFLLEVBQUcsTUFBTyxDQUFDLEdBRXhCLEdBQ0osR0FDSixHQUVKakQsUUFBUyxDQUNMNkQsbUJBQW9CLFdBQ2hCLE9BQU8zSCxFQUFVZ0MsVUFBTSxPQUFRLEdBQVEsV0FDbkMsT0FBT2QsRUFBWWMsTUFBTSxTQUFVMEIsR0FDL0IsT0FBUUEsRUFBR2pDLE9BQ1AsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFHTyxLQUFLbUUsU0FBUyxVQUFXLFlBQzVDLEtBQUssRUFFRCxPQURBekMsRUFBR2hDLE9BQ0ksQ0FBQyxFQUFHTSxLQUFLb0MsUUFBUXVCLEtBQUksU0FBVVUsR0FDOUIsT0FBT3BDLEVBQU1nRSxTQUFTNUIsRUFBRWpELFFBQzVCLEtBRWhCLEdBQ0osR0FDSixFQUNBOEUsYUFBYyxTQUFVM0UsR0FDcEIsT0FBT3ZELEVBQVVnQyxVQUFNLE9BQVEsR0FBUSxXQUNuQyxJQUFJNEYsRUFBUXBELEVBQ1osT0FBT3RELEVBQVljLE1BQU0sU0FBVTBCLEdBQy9CLE9BQVFBLEVBQUdqQyxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBR08sS0FBSzJGLHNCQUN4QixLQUFLLEVBT0QsT0FOQUMsRUFBU2xFLEVBQUdoQyxPQUNaOEMsRUFBU29ELEVBQ0pqQyxLQUFJLFNBQVVDLEdBQUssT0FBT0EsRUFBRXBCLE1BQVEsSUFDcEN1RCxRQUFPLFNBQVU5SSxFQUFHK0ksR0FBSyxPQUFPL0ksRUFBSStJLENBQUcsR0FBRyxHQUMvQ2hHLEtBQUt3QyxPQUFTQSxFQUNkeEMsS0FBSzJDLFNBQVNwQixHQUNQLENBQUMsRUFBR3ZCLEtBQUsrRCxRQUNwQixLQUFLLEVBRUQsT0FEQXJDLEVBQUdoQyxPQUNJLENBQUMsR0FFcEIsR0FDSixHQUNKLEVBQ0F5RyxJQUFLLFNBQVU1RSxHQUNYLE9BQU92RCxFQUFVZ0MsVUFBTSxPQUFRLEdBQVEsV0FDbkMsSUFBSStFLEVBQUlyRCxFQUNSLE9BQU94QyxFQUFZYyxNQUFNLFNBQVVnRixHQUMvQixPQUFRQSxFQUFHdkYsT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQUdPLEtBQUttRSxTQUFTLFlBQ2pDLEtBQUssRUFDRGEsRUFBR3RGLE9BQ0hxRixFQUFLLEVBQUdyRCxFQUFLMUIsS0FBS29DLFFBQ2xCNEMsRUFBR3ZGLE1BQVEsRUFDZixLQUFLLEVBQ0QsT0FBTXNGLEVBQUtyRCxFQUFHcEIsT0FFUCxDQUFDLEVBREpvQixFQUFHcUQsR0FDTWhELGdCQUFnQlIsSUFGQyxDQUFDLEVBQUcsR0FHdEMsS0FBSyxFQUNEeUQsRUFBR3RGLE9BQ0hzRixFQUFHdkYsTUFBUSxFQUNmLEtBQUssRUFFRCxPQURBc0YsSUFDTyxDQUFDLEVBQUcsR0FDZixLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQUcvRSxLQUFLeUMsVUFBVSxDQUFFbEIsUUFBU0EsS0FDN0MsS0FBSyxFQUVELE9BREF5RCxFQUFHdEYsT0FDSSxDQUFDLEdBRXBCLEdBQ0osR0FDSixLQUdHMEcsR0FBUyxJQUFBQyxPQUFNLFNBQVU3RixHQUN6QnlCLEdBQVEsSUFBQW9FLE9BQU0sUUFBU3BELEdBQ3ZCWCxHQUFTLElBQUErRCxPQUFNLFNBQVUxQixHQzFiaEMsRUFBd0MsU0FBVTFHLEVBQVNDLEVBQVlDLEVBQUdDLEdBRTFFLE9BQU8sSUFBS0QsSUFBTUEsRUFBSUUsV0FBVSxTQUFVQyxFQUFTQyxHQUMvQyxTQUFTQyxFQUFVQyxHQUFTLElBQU1DLEVBQUtOLEVBQVVPLEtBQUtGLEdBQWtDLENBQXZCLE1BQU9HLEdBQUtMLEVBQU9LLEVBQUksQ0FBRSxDQUMxRixTQUFTQyxFQUFTSixHQUFTLElBQU1DLEVBQUtOLEVBQWlCLE1BQUVLLEdBQWtDLENBQXZCLE1BQU9HLEdBQUtMLEVBQU9LLEVBQUksQ0FBRSxDQUM3RixTQUFTRixFQUFLSSxHQUpsQixJQUFlTCxFQUlhSyxFQUFPQyxLQUFPVCxFQUFRUSxFQUFPTCxRQUoxQ0EsRUFJeURLLEVBQU9MLE1BSmhEQSxhQUFpQk4sRUFBSU0sRUFBUSxJQUFJTixHQUFFLFNBQVVHLEdBQVdBLEVBQVFHLEVBQVEsS0FJakJPLEtBQUtSLEVBQVdLLEVBQVcsQ0FDN0dILEdBQU1OLEVBQVlBLEVBQVVhLE1BQU1oQixFQUFTQyxHQUFjLEtBQUtTLE9BQ2xFLEdBQ0osRUFDSSxFQUE0QyxTQUFVVixFQUFTa0IsR0FDL0QsSUFBc0dDLEVBQUdDLEVBQUdDLEVBQUdDLEVBQTNHQyxFQUFJLENBQUVDLE1BQU8sRUFBR0MsS0FBTSxXQUFhLEdBQVcsRUFBUEosRUFBRSxHQUFRLE1BQU1BLEVBQUUsR0FBSSxPQUFPQSxFQUFFLEVBQUksRUFBR0ssS0FBTSxHQUFJQyxJQUFLLElBQ2hHLE9BQU9MLEVBQUksQ0FBRVosS0FBTWtCLEVBQUssR0FBSSxNQUFTQSxFQUFLLEdBQUksT0FBVUEsRUFBSyxJQUF3QixtQkFBWEMsU0FBMEJQLEVBQUVPLE9BQU9DLFVBQVksV0FBYSxPQUFPQyxJQUFNLEdBQUlULEVBQ3ZKLFNBQVNNLEVBQUtJLEdBQUssT0FBTyxTQUFVQyxHQUFLLE9BQ3pDLFNBQWNDLEdBQ1YsR0FBSWYsRUFBRyxNQUFNLElBQUlnQixVQUFVLG1DQUMzQixLQUFPYixJQUFNQSxFQUFJLEVBQUdZLEVBQUcsS0FBT1gsRUFBSSxJQUFLQSxPQUNuQyxHQUFJSixFQUFJLEVBQUdDLElBQU1DLEVBQVksRUFBUmEsRUFBRyxHQUFTZCxFQUFVLE9BQUljLEVBQUcsR0FBS2QsRUFBUyxTQUFPQyxFQUFJRCxFQUFVLFNBQU1DLEVBQUV4QixLQUFLdUIsR0FBSSxHQUFLQSxFQUFFVixTQUFXVyxFQUFJQSxFQUFFeEIsS0FBS3VCLEVBQUdjLEVBQUcsS0FBS3BCLEtBQU0sT0FBT08sRUFFM0osT0FESUQsRUFBSSxFQUFHQyxJQUFHYSxFQUFLLENBQVMsRUFBUkEsRUFBRyxHQUFRYixFQUFFYixRQUN6QjBCLEVBQUcsSUFDUCxLQUFLLEVBQUcsS0FBSyxFQUFHYixFQUFJYSxFQUFJLE1BQ3hCLEtBQUssRUFBYyxPQUFYWCxFQUFFQyxRQUFnQixDQUFFaEIsTUFBTzBCLEVBQUcsR0FBSXBCLE1BQU0sR0FDaEQsS0FBSyxFQUFHUyxFQUFFQyxRQUFTSixFQUFJYyxFQUFHLEdBQUlBLEVBQUssQ0FBQyxHQUFJLFNBQ3hDLEtBQUssRUFBR0EsRUFBS1gsRUFBRUksSUFBSVMsTUFBT2IsRUFBRUcsS0FBS1UsTUFBTyxTQUN4QyxRQUNJLE1BQWtCZixHQUFaQSxFQUFJRSxFQUFFRyxNQUFZVyxPQUFTLEdBQUtoQixFQUFFQSxFQUFFZ0IsT0FBUyxLQUFrQixJQUFWSCxFQUFHLElBQXNCLElBQVZBLEVBQUcsSUFBVyxDQUFFWCxFQUFJLEVBQUcsUUFBVSxDQUMzRyxHQUFjLElBQVZXLEVBQUcsTUFBY2IsR0FBTWEsRUFBRyxHQUFLYixFQUFFLElBQU1hLEVBQUcsR0FBS2IsRUFBRSxJQUFNLENBQUVFLEVBQUVDLE1BQVFVLEVBQUcsR0FBSSxLQUFPLENBQ3JGLEdBQWMsSUFBVkEsRUFBRyxJQUFZWCxFQUFFQyxNQUFRSCxFQUFFLEdBQUksQ0FBRUUsRUFBRUMsTUFBUUgsRUFBRSxHQUFJQSxFQUFJYSxFQUFJLEtBQU8sQ0FDcEUsR0FBSWIsR0FBS0UsRUFBRUMsTUFBUUgsRUFBRSxHQUFJLENBQUVFLEVBQUVDLE1BQVFILEVBQUUsR0FBSUUsRUFBRUksSUFBSVcsS0FBS0osR0FBSyxLQUFPLENBQzlEYixFQUFFLElBQUlFLEVBQUVJLElBQUlTLE1BQ2hCYixFQUFFRyxLQUFLVSxNQUFPLFNBRXRCRixFQUFLaEIsRUFBS3JCLEtBQUtHLEVBQVN1QixHQUMxQixNQUFPWixHQUFLdUIsRUFBSyxDQUFDLEVBQUd2QixHQUFJUyxFQUFJLENBQUcsQ0FBRSxRQUFVRCxFQUFJRSxFQUFJLENBQUcsQ0FDekQsR0FBWSxFQUFSYSxFQUFHLEdBQVEsTUFBTUEsRUFBRyxHQUFJLE1BQU8sQ0FBRTFCLE1BQU8wQixFQUFHLEdBQUtBLEVBQUcsUUFBSyxFQUFRcEIsTUFBTSxFQUM5RSxDQXRCZ0RMLENBQUssQ0FBQ3VCLEVBQUdDLEdBQUssQ0FBRyxDQXVCckUsRUFTQSxhQUNBLElBQUlvRyxFQUFNLE1BQ05DLEVBQW1DLFFBQTNCN0UsRUFBSzhFLFFBQVFDLElBQUlDLFlBQXlCLElBQVBoRixFQUFnQkEsRUFBSyxJQUNwRTRFLEVBQUlLLElBQUksZUFBZ0IsVUFDeEJMLEVBQUlNLElBQUksZUFBc0IsQ0FBRUMsVUFBVSxLQUMxQ1AsRUFBSU0sSUFBSSxZQUNSTixFQUFJTSxJQUFJLE9BQ1JOLEVBQUlNLElBQUksSUFBSyxXQUFlLFlBQWFFLFVBQVcsZUFDcEQsSUFBSUMsRUFBUyxTQUFVQyxFQUFLQyxFQUFLdEksR0FDN0IsSUFBSStDLEVBQ0osS0FBa0MsUUFBM0JBLEVBQUtzRixFQUFJRSxRQUFRQyxZQUF5QixJQUFQekYsRUFBZ0JBLEVBQUssS0FBTzhFLFFBQVFDLElBQUlXLFdBQzlFLE9BQU9ILEVBQUlJLFdBQVcsS0FHdEIxSSxHQUVSLEVBQ0kySSxFQUFjLFNBQVVDLEdBQ3hCLE9BQU8sU0FBVVAsRUFBS0MsR0FBTyxPQUFPLE9BQVUsT0FBUSxPQUFRLEdBQVEsV0FDbEUsSUFBSTFGLEVBQVN6QyxFQUFRNEMsRUFBSXNELEVBQUl3QyxFQUM3QixPQUFPLEVBQVl4SCxNQUFNLFNBQVV5SCxHQUMvQixPQUFRQSxFQUFHaEksT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQUcsb0JBQ25CLEtBQUssRUFDRDhCLEVBQVVrRyxFQUFHL0gsT0FDYitILEVBQUdoSSxNQUFRLEVBQ2YsS0FBSyxFQUlELE9BSEFnSSxFQUFHOUgsS0FBS1ksS0FBSyxDQUFDLEVBQUcsRUFBRyxFQUFHLElBQ3ZCZ0IsRUFBUW1HLG1CQUNSMUMsR0FBTXRELEVBQUt1RixHQUFLSSxXQUNULENBQUMsRUFBR0UsRUFBR1AsRUFBS0MsRUFBSzFGLElBQzVCLEtBQUssRUFFRCxPQURBekMsRUFBU2tHLEVBQUcvRixNQUFNeUMsRUFBSSxDQUFDK0YsRUFBRy9ILFNBQ25CLENBQUMsRUFBRzZCLEVBQVFvRyxxQkFDdkIsS0FBSyxFQUVELE9BREFGLEVBQUcvSCxPQUNJLENBQUMsRUFBRyxHQUNmLEtBQUssRUFFRCxPQURBOEgsRUFBU0MsRUFBRy9ILE9BQ0wsQ0FBQyxFQUFHNkIsRUFBUXFHLG9CQUN2QixLQUFLLEVBSUQsT0FIQUgsRUFBRy9ILE9BQ0haLEVBQ3NCLGlCQUFYMEksRUFBc0JQLEVBQUlJLFdBQVdHLEdBQVVQLEVBQUlJLFdBQVcsS0FDbEUsQ0FBQyxFQUFHLEdBQ2YsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFHOUYsRUFBUXNHLGNBQzNCLEtBQUssRUFFRCxPQURBSixFQUFHL0gsT0FDSSxDQUFDLEVBQUdaLEdBQ2YsS0FBSyxFQUFHLE1BQU8sQ0FBQyxHQUV4QixHQUNKLEdBQUksQ0FDUixFQUNBd0gsRUFBSTdJLElBQUksV0FBVyxTQUFVdUosRUFBS0MsR0FBTyxPQUFPLE9BQVUsT0FBUSxPQUFRLEdBQVEsV0FDOUUsSUFBSXJCLEVBQ0osT0FBTyxFQUFZNUYsTUFBTSxTQUFVMEIsR0FDL0IsT0FBUUEsRUFBR2pDLE9BQ1AsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFHd0MsRUFBTXdCLEtBQUssQ0FBRU4sU0FBVSxDQUFFTyxLQUFNLE9BQ3pDb0UsT0FDQUMsS0FBSyxhQUNkLEtBQUssRUFFRCxPQURBbkMsRUFBU2xFLEVBQUdoQyxPQUNMLENBQUMsRUFBR3VILEVBQUllLE9BQU8sS0FBS0MsS0FBS3JDLElBRTVDLEdBQ0osR0FBSSxJQUNKVSxFQUFJN0ksSUFBSSxpQkFBaUIsU0FBVXVKLEVBQUtDLEdBQU8sT0FBTyxPQUFVLE9BQVEsT0FBUSxHQUFRLFdBQ3BGLElBQUluRyxFQUNKLE9BQU8sRUFBWWQsTUFBTSxTQUFVMEIsR0FDL0IsT0FBUUEsRUFBR2pDLE9BQ1AsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFHd0MsRUFBTWlHLFFBQVEsQ0FBRXJGLEtBQU1tRSxFQUFJbUIsT0FBT3RGLE9BQzNDaUYsT0FDQTNELFNBQVMsVUFBVywrQkFDN0IsS0FBSyxFQUVELE9BREFyRCxFQUFRWSxFQUFHaEMsT0FDSixDQUFDLEVBQUd1SCxFQUFJZSxPQUFPLEtBQUtDLEtBQUtuSCxhQUFxQyxFQUFTQSxFQUFNc0IsVUFFaEcsR0FDSixHQUFJLElBQ0prRSxFQUFJOEIsS0FBSyxVQUFXckIsRUFBUU8sR0FBWSxTQUFVTixFQUFLQyxFQUFLMUYsR0FBVyxPQUFPLE9BQVUsT0FBUSxPQUFRLEdBQVEsV0FFNUcsT0FBTyxFQUFZdkIsTUFBTSxTQUFVMEIsR0FDL0IsT0FBUUEsRUFBR2pDLE9BQ1AsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFHd0MsRUFBTW9HLE9BQU8sQ0FBRXhGLEtBQU1tRSxFQUFJN0gsS0FBSzBELFFBQ2pELEtBQUssRUFDRCxHQUFJbkIsRUFBR2hDLE9BQ0gsTUFBTSxJQU1WLE1BQU8sQ0FBQyxFQUxBLElBQUl1QyxFQUFNLENBQ2RZLEtBQU1tRSxFQUFJN0gsS0FBSzBELEtBQ2ZLLFFBQVM4RCxFQUFJN0gsS0FBSytELFFBQ2xCQyxTQUFVNkQsRUFBSTdILEtBQUtnRSxXQUVOVSxJQUFJdEMsSUFDekIsS0FBSyxFQUVELE9BREFHLEVBQUdoQyxPQUNJLENBQUMsRUFBRyxLQUV2QixHQUNKLEdBQUksS0FDSjRHLEVBQUlnQyxPQUFPLGdCQUFpQnZCLEVBQVFPLEdBQVksU0FBVU4sRUFBS0MsRUFBSzFGLEdBQVcsT0FBTyxPQUFVLE9BQVEsT0FBUSxHQUFRLFdBQ3BILElBQUlULEVBQ0osT0FBTyxFQUFZZCxNQUFNLFNBQVUwQixHQUMvQixPQUFRQSxFQUFHakMsT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQUd3QyxFQUFNaUcsUUFBUSxDQUFFckYsS0FBTW1FLEVBQUltQixPQUFPdEYsUUFDcEQsS0FBSyxFQUVELEdBQWMsUUFEZC9CLEVBQVFZLEVBQUdoQyxRQUVQLE1BQU0sSUFDVixNQUFPLENBQUMsRUFBR29CLEVBQU1rRCxJQUFJekMsSUFDekIsS0FBSyxFQUVELE9BREFHLEVBQUdoQyxPQUNJLENBQUMsRUFBRyxLQUV2QixHQUNKLEdBQUksS0FDSjRHLEVBQUlpQyxNQUFNLGdCQUFpQnhCLEVBQVFPLEdBQVksU0FBVU4sRUFBS0MsRUFBSzFGLEdBQVcsT0FBTyxPQUFVLE9BQVEsT0FBUSxHQUFRLFdBQ25ILElBQWtCVCxFQUNsQixPQUFPLEVBQVlkLE1BQU0sU0FBVTBCLEdBQy9CLE9BQVFBLEVBQUdqQyxPQUNQLEtBQUssRUFDRCxZQUEwQitJLElBQXBCeEIsRUFBSTdILEtBQUtzSixPQUE4QixDQUFDLEVBQUcsR0FDMUMsQ0FBQyxFQUFHeEcsRUFBTWlHLFFBQVEsQ0FBRXJGLEtBQU1tRSxFQUFJbUIsT0FBT3RGLFFBQ2hELEtBQUssRUFFRCxHQUFjLFFBRGQvQixFQUFRWSxFQUFHaEMsUUFFUCxNQUFNLElBQ1YsTUFBTyxDQUFDLEVBQUdvQixFQUFNeUQsS0FBS2hELEVBQVN5RixFQUFJN0gsS0FBS3NKLFNBQzVDLEtBQUssRUFXTCxLQUFLLEVBRUQsT0FEQS9HLEVBQUdoQyxPQUNJLENBQUMsRUFBRyxLQVZmLEtBQUssRUFDRCxZQUEyQjhJLElBQXJCeEIsRUFBSTdILEtBQUtzQyxRQUErQixDQUFDLEVBQUcsR0FDM0MsQ0FBQyxFQUFHUSxFQUFNVyxpQkFBaUIsQ0FBRUMsS0FBTW1FLEVBQUltQixPQUFPdEYsTUFBUSxDQUFFakIsS0FBTSxDQUFFaUIsS0FBTW1FLEVBQUk3SCxLQUFLc0MsV0FBYUYsUUFBUUEsSUFDL0csS0FBSyxFQUVELEdBQWMsUUFEZFQsRUFBUVksRUFBR2hDLFFBRVAsTUFBTSxJQUNWLE1BQU8sQ0FBQyxFQUFHMEcsRUFBT3ZFLGdCQUFnQk4sRUFBU1QsRUFBTXVCLElBQUsyRSxFQUFJN0gsS0FBS3NDLFVBSW5FLEtBQUssRUFDRCxZQUE4QitHLElBQXhCeEIsRUFBSTdILEtBQUt1SixXQUFrQyxDQUFDLEVBQUcsR0FDOUMsQ0FBQyxFQUFHekcsRUFBTVcsaUJBQWlCLENBQUVDLEtBQU1tRSxFQUFJbUIsT0FBT3RGLE1BQVEsQ0FBRWpCLEtBQU0sQ0FBRXNCLFFBQVM4RCxFQUFJN0gsS0FBS3VKLGNBQWdCbkgsUUFBUUEsSUFDckgsS0FBSyxFQUVELEdBQWMsUUFEZFQsRUFBUVksRUFBR2hDLFFBRVAsTUFBTSxJQUNWLE1BQU8sQ0FBQyxFQUFHLEtBQ2YsS0FBSyxFQUFHLE1BQU0sSUFFdEIsR0FDSixHQUFJLEtBQ0o0RyxFQUFJN0ksSUFBSSxZQUFZLFNBQVV1SixFQUFLQyxHQUFPLE9BQU8sT0FBVSxPQUFRLE9BQVEsR0FBUSxXQUMvRSxJQUFJM0IsRUFDSixPQUFPLEVBQVl0RixNQUFNLFNBQVUwQixHQUMvQixPQUFRQSxFQUFHakMsT0FDUCxLQUFLLEVBQUcsTUFBTyxDQUFDLEVBQUc2QyxFQUFPbUIsS0FBSyxDQUFFakIsT0FBUSxDQUFFMEIsSUFBSyxLQUN2Q3lFLE9BQU8sZUFDUGIsT0FDQUMsS0FBSyxZQUNkLEtBQUssRUFFRCxPQURBekMsRUFBVTVELEVBQUdoQyxPQUNOLENBQUMsRUFBR3VILEVBQUllLE9BQU8sS0FBS0MsS0FBSzNDLElBRTVDLEdBQ0osR0FBSSxJQUNKZ0IsRUFBSTdJLElBQUksa0JBQWtCLFNBQVV1SixFQUFLQyxHQUFPLE9BQU8sT0FBVSxPQUFRLE9BQVEsR0FBUSxXQUNyRixJQUFJdkcsRUFDSixPQUFPLEVBQVlWLE1BQU0sU0FBVTBCLEdBQy9CLE9BQVFBLEVBQUdqQyxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBRzZDLEVBQU80RixRQUFRLENBQUVyRixLQUFNbUUsRUFBSW1CLE9BQU90RixPQUM1Q2lGLE9BQ0EzRCxTQUFTLFVBQVcsNkJBQzdCLEtBQUssRUFFRCxNQUFPLENBQUMsR0FEUnpELEVBQVNnQixFQUFHaEMsUUFFRnVILEVBQUllLE9BQU8sS0FBS0MsS0FBS3ZILEdBQ3JCdUcsRUFBSWUsT0FBTyxLQUFLWSxLQUFLLHNCQUUzQyxHQUNKLEdBQUksSUFDSnRDLEVBQUk4QixLQUFLLFdBQVlyQixFQUFRTyxHQUFZLFNBQVVOLEVBQUtDLEVBQUsxRixHQUFXLE9BQU8sT0FBVSxPQUFRLE9BQVEsR0FBUSxXQUM3RyxJQUFJYixFQUNKLE9BQU8sRUFBWVYsTUFBTSxTQUFVMEIsR0FDL0IsT0FBUUEsRUFBR2pDLE9BQ1AsS0FBSyxFQUFHLE1BQU8sQ0FBQyxFQUFHNkMsRUFBTytGLE9BQU8sQ0FBRXhGLEtBQU1tRSxFQUFJN0gsS0FBSzBELFFBQ2xELEtBQUssRUFDRCxHQUFJbkIsRUFBR2hDLE9BQ0gsTUFBTSxJQU9WLE9BTkFnQixFQUFTLElBQUk0QixFQUFPLENBQ2hCTyxLQUFNbUUsRUFBSTdILEtBQUswRCxLQUNmTCxPQUFRLEVBQ1JxQyxRQUE4QixPQUFyQm1DLEVBQUk3SCxLQUFLMEYsYUFBbUIyRCxFQUFZeEIsRUFBSTdILEtBQUswRixXQUV2RGxDLFNBQVNwQixHQUNULENBQUMsRUFBR2IsRUFBT3FELFFBQ3RCLEtBQUssRUFFRCxPQURBckMsRUFBR2hDLE9BQ0ksQ0FBQyxFQUFHLEtBRXZCLEdBQ0osR0FBSSxLQUNKNEcsRUFBSWdDLE9BQU8saUJBQWtCdkIsRUFBUU8sR0FBWSxTQUFVTixFQUFLQyxFQUFLMUYsR0FBVyxPQUFPLE9BQVUsT0FBUSxPQUFRLEdBQVEsV0FDckgsSUFBSWIsRUFDSixPQUFPLEVBQVlWLE1BQU0sU0FBVTBCLEdBQy9CLE9BQVFBLEVBQUdqQyxPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBRzZDLEVBQU80RixRQUFRLENBQUVyRixLQUFNbUUsRUFBSW1CLE9BQU90RixRQUNyRCxLQUFLLEVBRUQsR0FBZSxRQURmbkMsRUFBU2dCLEVBQUdoQyxRQUVSLE1BQU0sSUFDVixNQUFPLENBQUMsRUFBR2dCLEVBQU95RixJQUFJNUUsSUFDMUIsS0FBSyxFQUVELE9BREFHLEVBQUdoQyxPQUNJLENBQUMsRUFBRyxLQUV2QixHQUNKLEdBQUksS0FDSjRHLEVBQUlpQyxNQUFNLGlCQUFrQnhCLEVBQVFPLEdBQVksU0FBVU4sRUFBS0MsRUFBSzFGLEdBQVcsT0FBTyxPQUFVLE9BQVEsT0FBUSxHQUFRLFdBQ3BILElBQVliLEVBQ1osT0FBTyxFQUFZVixNQUFNLFNBQVUwQixHQUMvQixPQUFRQSxFQUFHakMsT0FDUCxLQUFLLEVBQ0QsWUFBMkIrSSxJQUFyQnhCLEVBQUk3SCxLQUFLc0MsUUFBK0IsQ0FBQyxFQUFHLEdBQzNDLENBQUMsRUFBR2EsRUFBT00saUJBQWlCLENBQUVDLEtBQU1tRSxFQUFJbUIsT0FBT3RGLE1BQVEsQ0FBRWpCLEtBQU0sQ0FBRWlCLEtBQU1tRSxFQUFJN0gsS0FBS3NDLFdBQWFGLFFBQVFBLElBQ2hILEtBQUssRUFFRCxHQUFlLFFBRGZiLEVBQVNnQixFQUFHaEMsUUFFUixNQUFNLElBQ1YsTUFBTyxDQUFDLEVBQUcwRyxFQUFPOUUsaUJBQWlCQyxFQUFTYixFQUFPMkIsSUFBSzJFLEVBQUk3SCxLQUFLc0MsVUFDckUsS0FBSyxFQUVELE9BREFDLEVBQUdoQyxPQUNJLENBQUMsRUFBRyxLQUNmLEtBQUssRUFDRCxZQUE4QjhJLElBQXhCeEIsRUFBSTdILEtBQUswSixXQUFrQyxDQUFDLEVBQUcsR0FDOUMsQ0FBQyxFQUFHdkcsRUFBT00saUJBQWlCLENBQUVDLEtBQU1tRSxFQUFJbUIsT0FBT3RGLE1BQVEsQ0FBRWpCLEtBQU0sQ0FBRWlELFFBQVNtQyxFQUFJN0gsS0FBSzBKLGNBQWdCdEgsUUFBUUEsSUFDdEgsS0FBSyxFQUVELEdBQWUsUUFEZmIsRUFBU2dCLEVBQUdoQyxRQUVSLE1BQU0sSUFDVixNQUFPLENBQUMsRUFBRyxLQUNmLEtBQUssRUFBRyxNQUFNLElBRXRCLEdBQ0osR0FBSSxLQUNKNEcsRUFBSThCLEtBQUssV0FBWXJCLEVBQVFPLEdBQVksU0FBVU4sRUFBS0MsRUFBSzFGLEdBQVcsT0FBTyxPQUFVLE9BQVEsT0FBUSxHQUFRLFdBQzdHLElBQUlHLEVBQUlvSCxFQUNSLE9BQU8sRUFBWTlJLE1BQU0sU0FBVWdGLEdBQy9CLE9BQVFBLEVBQUd2RixPQUNQLEtBQUssRUFBRyxNQUFPLENBQUMsRUFBRzZDLEVBQU8rRixPQUFPLENBQUV4RixLQUFNbUUsRUFBSTdILEtBQUt1QixVQUNsRCxLQUFLLEVBRUQsT0FEQWdCLEdBQU9zRCxFQUFHdEYsUUFDSyxDQUFDLEVBQUcsR0FDWixDQUFDLEVBQUd1QyxFQUFNb0csT0FBTyxDQUFFeEYsS0FBTW1FLEVBQUk3SCxLQUFLMkIsU0FDN0MsS0FBSyxFQUNEWSxHQUFPc0QsRUFBR3RGLE9BQ1ZzRixFQUFHdkYsTUFBUSxFQUNmLEtBQUssRUFDRCxHQUFJaUMsRUFDQSxNQUFNLElBQ1YsUUFBdUI4RyxJQUFuQnhCLEVBQUk3SCxLQUFLNEIsWUFBeUN5SCxJQUFsQnhCLEVBQUk3SCxLQUFLOEIsS0FDekMsTUFBTSxJQVFWLE9BUEE2SCxFQUFTLElBQUkxQyxFQUFPLENBQ2hCMUYsT0FBUXNHLEVBQUk3SCxLQUFLdUIsT0FDakJJLE1BQU9rRyxFQUFJN0gsS0FBSzJCLE1BQ2hCQyxNQUFPaUcsRUFBSTdILEtBQUs0QixNQUNoQkUsS0FBTStGLEVBQUk3SCxLQUFLOEIsUUFFWjBCLFNBQVNwQixHQUNULENBQUMsRUFBR3VILEVBQU8vRSxRQUN0QixLQUFLLEVBRUQsT0FEQWlCLEVBQUd0RixPQUNJLENBQUMsRUFBRyxLQUV2QixHQUNKLEdBQUksS0FDSjRHLEVBQUlnQyxPQUFPLFdBQVl2QixFQUFRTyxHQUFZLFNBQVVOLEVBQUtDLEVBQUsxRixHQUFXLE9BQU8sT0FBVSxPQUFRLE9BQVEsR0FBUSxXQUMvRyxJQUFJdUgsRUFDSixPQUFPLEVBQVk5SSxNQUFNLFNBQVUwQixHQUMvQixPQUFRQSxFQUFHakMsT0FDUCxLQUFLLEVBQ0QsUUFBd0IrSSxJQUFwQnhCLEVBQUk3SCxLQUFLdUIsYUFBMkM4SCxJQUFuQnhCLEVBQUk3SCxLQUFLMkIsTUFDMUMsTUFBTSxJQUNWLE1BQU8sQ0FBQyxFQUFHc0YsRUFBTzhCLFFBQVEsQ0FDbEJ4SCxPQUFRc0csRUFBSTdILEtBQUt1QixPQUNqQkksTUFBT2tHLEVBQUk3SCxLQUFLMkIsU0FFNUIsS0FBSyxFQUVELEdBQWUsUUFEZmdJLEVBQVNwSCxFQUFHaEMsUUFFUixNQUFNLElBQ1YsTUFBTyxDQUFDLEVBQUdvSixFQUFPL0csZ0JBQWdCUixFQUFTLElBQy9DLEtBQUssRUFFRCxPQURBRyxFQUFHaEMsT0FDSSxDQUFDLEVBQUcsS0FFdkIsR0FDSixHQUFJLEtBQ0osSUFDSSxZQUFpQjhHLFFBQVFDLElBQUlzQyxpQkFJakMsQ0FGQSxNQUFPQyxHQUNIQyxRQUFRRCxNQUFNQSxFQUNsQixDQUNBMUMsRUFBSTRDLE9BQU8zQyxHQUFNLFdBQ2IwQyxRQUFRRSxJQUFJLHFDQUFxQ0MsT0FBTzdDLEdBQzVELEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tbHNpdGUvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbWxzaXRlL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL21sc2l0ZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vbWxzaXRlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbWxzaXRlL2V4dGVybmFsIGNvbW1vbmpzIFwiZXhwcmVzc1wiIiwid2VicGFjazovL21sc2l0ZS9leHRlcm5hbCBjb21tb25qcyBcImJvZHktcGFyc2VyXCIiLCJ3ZWJwYWNrOi8vbWxzaXRlL2V4dGVybmFsIGNvbW1vbmpzIFwiZG90ZW52XCIiLCJ3ZWJwYWNrOi8vbWxzaXRlL2V4dGVybmFsIGNvbW1vbmpzIFwiY29yc1wiIiwid2VicGFjazovL21sc2l0ZS9leHRlcm5hbCBjb21tb25qcyBcIm1vbmdvb3NlXCIiLCJ3ZWJwYWNrOi8vbWxzaXRlL2V4dGVybmFsIG5vZGUtY29tbW9uanMgXCJwYXRoXCIiLCJ3ZWJwYWNrOi8vbWxzaXRlLy4vc2VydmVyL3NyYy9zY2hlbWEudHMiLCJ3ZWJwYWNrOi8vbWxzaXRlLy4vc2VydmVyL3NyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcImV4cHJlc3NcIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJib2R5LXBhcnNlclwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcImRvdGVudlwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcImNvcnNcIik7IiwiY29uc3QgX19XRUJQQUNLX05BTUVTUEFDRV9PQkpFQ1RfXyA9IHJlcXVpcmUoXCJtb25nb29zZVwiKTsiLCJjb25zdCBfX1dFQlBBQ0tfTkFNRVNQQUNFX09CSkVDVF9fID0gcmVxdWlyZShcInBhdGhcIik7IiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuaW1wb3J0IHsgU2NoZW1hLCBtb2RlbCB9IGZyb20gXCJtb25nb29zZVwiO1xudmFyIHJlY29yZFNjaGVtYSA9IG5ldyBTY2hlbWEoe1xuICAgIHBsYXllcjogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgbGV2ZWw6IHsgdHlwZTogU3RyaW5nLCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgIGhlcnR6OiB7IHR5cGU6IE51bWJlciwgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICBsaW5rOiB7IHR5cGU6IFN0cmluZywgcmVxdWlyZWQ6IHRydWUgfSxcbiAgICBwbGF5ZXJJRDogeyB0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsIHJlZjogXCJQbGF5ZXJcIiB9LFxuICAgIGxldmVsSUQ6IHsgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLCByZWY6IFwiTGV2ZWxcIiB9LFxufSwge1xuICAgIHN0YXRpY3M6IHtcbiAgICAgICAgcGxheWVyTmFtZVVwZGF0ZTogZnVuY3Rpb24gKHNlc3Npb24sIGlkLCBuZXduYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgdGhpcy51cGRhdGVNYW55KHsgcGxheWVySUQ6IGlkIH0sIHsgJHNldDogeyBwbGF5ZXI6IG5ld25hbWUgfSB9KS5zZXNzaW9uKHNlc3Npb24pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGxldmVsTmFtZVVwZGF0ZTogZnVuY3Rpb24gKHNlc3Npb24sIGlkLCBuZXduYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgdGhpcy51cGRhdGVNYW55KHsgbGV2ZWxJRDogaWQgfSwgeyAkc2V0OiB7IGxldmVsOiBuZXduYW1lIH0gfSkuc2Vzc2lvbihzZXNzaW9uKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgICBjYXNjYWRpbmdEZWxldGU6IGZ1bmN0aW9uIChzZXNzaW9uLCBqdXN0T25lKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxldmVsO1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIExldmVsLmZpbmRCeUlkQW5kVXBkYXRlKHRoaXMubGV2ZWxJRCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcHVsbDogeyByZWNvcmRzOiB0aGlzLl9pZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnNlc3Npb24oc2Vzc2lvbildO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGp1c3RPbmUgPT09IDEpKSByZXR1cm4gWzMsIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgUGxheWVyLmZpbmRCeUlkQW5kVXBkYXRlKHRoaXMucGxheWVySUQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwdWxsOiB7IHJlY29yZHM6IHRoaXMuX2lkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaW5jOiB7IHBvaW50czogLShsZXZlbCA9PT0gbnVsbCB8fCBsZXZlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGV2ZWwucG9pbnRzKSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5zZXNzaW9uKHNlc3Npb24pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0LCBQbGF5ZXIuZmluZEJ5SWRBbmRVcGRhdGUodGhpcy5wbGF5ZXJJRCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcHVsbDogeyByZWNvcmRzOiB0aGlzLl9pZCB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLnNlc3Npb24oc2Vzc2lvbildO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbNCwgdGhpcy5kZWxldGVPbmUoeyBzZXNzaW9uOiBzZXNzaW9uIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfSxcbn0pO1xucmVjb3JkU2NoZW1hLnByZShcInNhdmVcIiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlc3Npb24sIGxldmVsLCBwbGF5ZXI7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb24gPSB0aGlzLiRzZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgTGV2ZWwuZmluZE9uZUFuZFVwZGF0ZSh7IG5hbWU6IHRoaXMubGV2ZWwgfSwgeyAkYWRkVG9TZXQ6IHsgcmVjb3JkczogdGhpcy5faWQgfSB9LCB7IG5ldzogdHJ1ZSB9KS5zZXNzaW9uKHNlc3Npb24pXTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGxldmVsID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGV2ZWwgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMZXZlbCBub3QgZm91bmRcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgUGxheWVyLmZpbmRPbmVBbmRVcGRhdGUoeyBuYW1lOiB0aGlzLnBsYXllciB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFkZFRvU2V0OiB7IHJlY29yZHM6IHRoaXMuX2lkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGluYzogeyBwb2ludHM6IGxldmVsLnBvaW50cyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgeyBuZXc6IHRydWUgfSkuc2Vzc2lvbihzZXNzaW9uKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXIgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQbGF5ZXIgbm90IGZvdW5kXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllcklEID0gcGxheWVyLl9pZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXZlbElEID0gbGV2ZWwuX2lkO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn0pO1xudmFyIGxldmVsU2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gICAgbmFtZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgY3JlYXRvcjogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgcG9zaXRpb246IHsgdHlwZTogTnVtYmVyLCByZXF1aXJlZDogdHJ1ZSB9LFxuICAgIHJlY29yZHM6IFt7IHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCwgcmVmOiBcIlJlY29yZFwiIH1dLFxufSwge1xuICAgIG1pbmltaXplOiBmYWxzZSxcbiAgICB0b0pTT046IHsgdmlydHVhbHM6IHRydWUgfSxcbiAgICB0b09iamVjdDogeyB2aXJ0dWFsczogdHJ1ZSB9LFxuICAgIHZpcnR1YWxzOiB7XG4gICAgICAgIHBvaW50czoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb24gPD0gMTAwXG4gICAgICAgICAgICAgICAgICAgID8gMjI1MCAvICgwLjM3ICogdGhpcy5wb3NpdGlvbiArIDkpIC0gNDBcbiAgICAgICAgICAgICAgICAgICAgOiAwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIHN0YXRpY3M6IHtcbiAgICAgICAgbGV2ZWxQb2ludHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGV2ZWxzO1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIHRoaXMuZmluZCh7IHBvc2l0aW9uOiB7ICRsdGU6IDEwMCB9IH0pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbHMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyLCBsZXZlbHMubWFwKGZ1bmN0aW9uIChsKSB7IHJldHVybiBbbC5faWQsIGwucG9pbnRzXTsgfSldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgICAgYWRkOiBmdW5jdGlvbiAoc2Vzc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIExldmVsLnVwZGF0ZU1hbnkoeyBwb3NpdGlvbjogeyAkZ3RlOiB0aGlzLnBvc2l0aW9uIH0gfSwgeyAkaW5jOiB7IHBvc2l0aW9uOiAxIH0gfSkuc2Vzc2lvbihzZXNzaW9uKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHNlc3Npb24oc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCB0aGlzLnNhdmUoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBkZWw6IGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxwO1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIExldmVsLnVwZGF0ZU1hbnkoeyBwb3NpdGlvbjogeyAkZ3Q6IHRoaXMucG9zaXRpb24gfSB9LCB7ICRpbmM6IHsgcG9zaXRpb246IC0xIH0gfSkuc2Vzc2lvbihzZXNzaW9uKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgdGhpcy5wb3B1bGF0ZShcInJlY29yZHNcIildO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHRoaXMucmVjb3Jkcy5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5jYXNjYWRpbmdEZWxldGUoc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCB0aGlzLmRlbGV0ZU9uZSh7IHNlc3Npb246IHNlc3Npb24gfSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIExldmVsLmxldmVsUG9pbnRzKCldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxwID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgUGxheWVyLnVwZGF0ZUFsbFBvaW50cyhzZXNzaW9uLCBscCldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbW92ZTogZnVuY3Rpb24gKHNlc3Npb24sIHBvcykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBscDtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnBvc2l0aW9uID4gcG9zKSkgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIExldmVsLnVwZGF0ZU1hbnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFuZDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgcG9zaXRpb246IHsgJGd0ZTogcG9zIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHBvc2l0aW9uOiB7ICRsdDogdGhpcy5wb3NpdGlvbiB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7ICRpbmM6IHsgcG9zaXRpb246IDEgfSB9KS5zZXNzaW9uKHNlc3Npb24pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnBvc2l0aW9uIDwgcG9zKSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIExldmVsLnVwZGF0ZU1hbnkoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGFuZDogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgcG9zaXRpb246IHsgJGx0ZTogcG9zIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHBvc2l0aW9uOiB7ICRndDogdGhpcy5wb3NpdGlvbiB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB7ICRpbmM6IHsgcG9zaXRpb246IC0xIH0gfSkuc2Vzc2lvbihzZXNzaW9uKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFs0LCBMZXZlbC5maW5kQnlJZEFuZFVwZGF0ZSh0aGlzLl9pZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2V0OiB7IHBvc2l0aW9uOiBwb3MgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5zZXNzaW9uKHNlc3Npb24pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBMZXZlbC5sZXZlbFBvaW50cygpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBscCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIFBsYXllci51cGRhdGVBbGxQb2ludHMoc2Vzc2lvbiwgbHApXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfSxcbn0pO1xubGV2ZWxTY2hlbWEucHJlKFwic2F2ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2Vzc2lvbiwgbHA7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb24gPSB0aGlzLiRzZXNzaW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgTGV2ZWwubGV2ZWxQb2ludHMoKV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBscCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBQbGF5ZXIudXBkYXRlQWxsUG9pbnRzKHNlc3Npb24sIGxwKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSk7XG52YXIgcGxheWVyU2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gICAgbmFtZTogeyB0eXBlOiBTdHJpbmcsIHJlcXVpcmVkOiB0cnVlIH0sXG4gICAgcG9pbnRzOiB7IHR5cGU6IE51bWJlciwgcmVxdWlyZWQ6IHRydWUsIGRlZmF1bHQ6IDAgfSxcbiAgICBkaXNjb3JkOiB7IHR5cGU6IFN0cmluZyB9LFxuICAgIHJlY29yZHM6IFt7IHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCwgcmVmOiBcIlJlY29yZFwiIH1dLFxufSwge1xuICAgIG1pbmltaXplOiBmYWxzZSxcbiAgICB0b0pTT046IHsgdmlydHVhbHM6IHRydWUgfSxcbiAgICB0b09iamVjdDogeyB2aXJ0dWFsczogdHJ1ZSB9LFxuICAgIHZpcnR1YWxzOiB7XG4gICAgICAgIGhlcnR6OiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBycnMsIF9pLCBfYSwgcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCB0aGlzLnBvcHVsYXRlKFwicmVjb3Jkc1wiLCBcImhlcnR6XCIpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnJzID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoX2kgPSAwLCBfYSA9IHRoaXMucmVjb3JkczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBycnNbci5oZXJ0el0gPSAocnJzW3IuaGVydHpdIHx8IDApICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlcG9wdWxhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyLCBycnNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIGNsYXNzOiB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICB2YXIgY2xhc3NlcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgWzEsIFwiTGVnYWN5XCJdLFxuICAgICAgICAgICAgICAgICAgICBbNTAsIFwiQ2xhc3MgRFwiXSxcbiAgICAgICAgICAgICAgICAgICAgWzE1MCwgXCJDbGFzcyBDXCJdLFxuICAgICAgICAgICAgICAgICAgICBbMzAwLCBcIkNsYXNzIEJcIl0sXG4gICAgICAgICAgICAgICAgICAgIFs2MDAsIFwiQ2xhc3MgQVwiXSxcbiAgICAgICAgICAgICAgICAgICAgWzEwMDAsIFwiQ2xhc3MgU1wiXSxcbiAgICAgICAgICAgICAgICAgICAgWzIwMDAwLCBcIk92ZXJsb3Jkc1wiXSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIHJldHVybiAoKF9hID0gY2xhc3Nlcy5maW5kKGZ1bmN0aW9uIChjKSB7IHJldHVybiBfdGhpcy5wb2ludHMgPCBjWzBdOyB9KSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogY2xhc3Nlc1swXSlbMV07XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH0sXG4gICAgc3RhdGljczoge1xuICAgICAgICB1cGRhdGVBbGxQb2ludHM6IGZ1bmN0aW9uIChzZXNzaW9uLCBscCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBwbGF5ZXJzLCBfbG9vcF8xLCBfaSwgcGxheWVyc18xLCBwO1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIHRoaXMuZmluZCgpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wXzEgPSBmdW5jdGlvbiAocCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGV2ZWxJRHMsIHBvaW50cztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCBwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZ2V0Q29tcGxldGVkTGV2ZWxzKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChsZXZlbHMpIHsgcmV0dXJuIGxldmVscy5tYXAoZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGwuX2lkOyB9KTsgfSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWxJRHMgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IGxwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChlKSB7IHJldHVybiBsZXZlbElEcy5pbmNsdWRlcyhlWzBdKTsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEgKyBiWzFdOyB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5wb2ludHMgPSBwb2ludHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgNTAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLiRzZXNzaW9uKHNlc3Npb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIHAuc2F2ZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaSA9IDAsIHBsYXllcnNfMSA9IHBsYXllcnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9pIDwgcGxheWVyc18xLmxlbmd0aCkpIHJldHVybiBbMywgNV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHBsYXllcnNfMVtfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs1LCBfbG9vcF8xKHApXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA0O1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIGdldENvbXBsZXRlZExldmVsczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIHRoaXMucG9wdWxhdGUoXCJyZWNvcmRzXCIsIFwibGV2ZWxJRFwiKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiwgdGhpcy5yZWNvcmRzLm1hcChmdW5jdGlvbiAocikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIExldmVsLmZpbmRCeUlkKHIubGV2ZWxJRCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHVwZGF0ZVBvaW50czogZnVuY3Rpb24gKHNlc3Npb24pIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGV2ZWxzLCBwb2ludHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgdGhpcy5nZXRDb21wbGV0ZWRMZXZlbHMoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWxzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IGxldmVsc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChsKSB7IHJldHVybiBsLnBvaW50czsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYSArIGI7IH0sIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRzID0gcG9pbnRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHNlc3Npb24oc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCB0aGlzLnNhdmUoKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBiYW46IGZ1bmN0aW9uIChzZXNzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9pLCBfYSwgcjtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCB0aGlzLnBvcHVsYXRlKFwicmVjb3Jkc1wiKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pID0gMCwgX2EgPSB0aGlzLnJlY29yZHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9pIDwgX2EubGVuZ3RoKSkgcmV0dXJuIFszLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgci5jYXNjYWRpbmdEZWxldGUoc2Vzc2lvbildO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2krKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQsIHRoaXMuZGVsZXRlT25lKHsgc2Vzc2lvbjogc2Vzc2lvbiB9KV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgIH0sXG59KTtcbmV4cG9ydCB2YXIgUmVjb3JkID0gbW9kZWwoXCJSZWNvcmRcIiwgcmVjb3JkU2NoZW1hKTtcbmV4cG9ydCB2YXIgTGV2ZWwgPSBtb2RlbChcIkxldmVsXCIsIGxldmVsU2NoZW1hKTtcbmV4cG9ydCB2YXIgUGxheWVyID0gbW9kZWwoXCJQbGF5ZXJcIiwgcGxheWVyU2NoZW1hKTtcbiIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoZyAmJiAoZyA9IDAsIG9wWzBdICYmIChfID0gMCkpLCBfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbnZhciBfYTtcbmltcG9ydCBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIjtcbmltcG9ydCBlbnYgZnJvbSBcImRvdGVudlwiO1xuaW1wb3J0IGNvcnMgZnJvbSBcImNvcnNcIjtcbmltcG9ydCBtb25nb29zZSBmcm9tIFwibW9uZ29vc2VcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyBSZWNvcmQsIExldmVsLCBQbGF5ZXIgfSBmcm9tIFwiLi9zY2hlbWFcIjtcbmVudi5jb25maWcoKTtcbnZhciBhcHAgPSBleHByZXNzKCk7XG52YXIgcG9ydCA9IChfYSA9IHByb2Nlc3MuZW52LlBPUlQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDMwMDA7XG5hcHAuc2V0KFwicXVlcnkgcGFyc2VyXCIsIFwic2ltcGxlXCIpO1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoeyBleHRlbmRlZDogdHJ1ZSB9KSk7XG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbmFwcC51c2UoY29ycygpKTtcbmFwcC51c2UoXCIvXCIsIGV4cHJlc3Muc3RhdGljKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIFwiLi4vY2xpZW50XCIpKSk7XG52YXIgYXV0aGVkID0gZnVuY3Rpb24gKHJlcSwgcmVzLCBuZXh0KSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICghKChfYSA9IHJlcS5oZWFkZXJzLmF1dGgpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFwiXCIgPT09IHByb2Nlc3MuZW52LkJPVF9UT0tFTikpIHtcbiAgICAgICAgcmV0dXJuIHJlcy5zZW5kU3RhdHVzKDQwMyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBuZXh0KCk7XG4gICAgfVxufTtcbnZhciB0cmFuc2FjdGlvbiA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAocmVxLCByZXMpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZXNzaW9uLCByZXN1bHQsIF9hLCBfYiwgY29kZV8xO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIG1vbmdvb3NlLnN0YXJ0U2Vzc2lvbigpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIHNlc3Npb24gPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIF9jLnRyeXMucHVzaChbMiwgNSwgNywgOV0pO1xuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLnN0YXJ0VHJhbnNhY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgX2IgPSAoX2EgPSByZXMpLnNlbmRTdGF0dXM7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgZm4ocmVxLCByZXMsIHNlc3Npb24pXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9iLmFwcGx5KF9hLCBbX2Muc2VudCgpXSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgc2Vzc2lvbi5jb21taXRUcmFuc2FjdGlvbigpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCA5XTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGNvZGVfMSA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBzZXNzaW9uLmFib3J0VHJhbnNhY3Rpb24oKV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgY29kZV8xID09PSBcIm51bWJlclwiID8gcmVzLnNlbmRTdGF0dXMoY29kZV8xKSA6IHJlcy5zZW5kU3RhdHVzKDUwMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgOV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OiByZXR1cm4gWzQsIHNlc3Npb24uZW5kU2Vzc2lvbigpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyLCByZXN1bHRdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7IH07XG59O1xuYXBwLmdldChcIi9sZXZlbHNcIiwgZnVuY3Rpb24gKHJlcSwgcmVzKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBsZXZlbHM7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgTGV2ZWwuZmluZCh7IHBvc2l0aW9uOiB7ICRsdGU6IDEwMCB9IH0pXG4gICAgICAgICAgICAgICAgICAgIC5sZWFuKClcbiAgICAgICAgICAgICAgICAgICAgLnNvcnQoXCJwb3NpdGlvblwiKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgbGV2ZWxzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgcmVzLnN0YXR1cygyMDApLmpzb24obGV2ZWxzKV07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9KTtcbmFwcC5nZXQoXCIvbGV2ZWxzLzpuYW1lXCIsIGZ1bmN0aW9uIChyZXEsIHJlcykgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbGV2ZWw7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgTGV2ZWwuZmluZE9uZSh7IG5hbWU6IHJlcS5wYXJhbXMubmFtZSB9KVxuICAgICAgICAgICAgICAgICAgICAubGVhbigpXG4gICAgICAgICAgICAgICAgICAgIC5wb3B1bGF0ZShcInJlY29yZHNcIiwgXCJwbGF5ZXIgaGVydHogbGluayBwbGF5ZXJJRFwiKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgbGV2ZWwgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyLCByZXMuc3RhdHVzKDIwMCkuanNvbihsZXZlbCA9PT0gbnVsbCB8fCBsZXZlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbGV2ZWwucmVjb3JkcyldO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfSk7XG5hcHAucG9zdChcIi9sZXZlbHNcIiwgYXV0aGVkLCB0cmFuc2FjdGlvbihmdW5jdGlvbiAocmVxLCByZXMsIHNlc3Npb24pIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxldmVsO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQsIExldmVsLmV4aXN0cyh7IG5hbWU6IHJlcS5ib2R5Lm5hbWUgfSldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGlmIChfYS5zZW50KCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IDQwOTtcbiAgICAgICAgICAgICAgICBsZXZlbCA9IG5ldyBMZXZlbCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHJlcS5ib2R5Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0b3I6IHJlcS5ib2R5LmNyZWF0b3IsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiByZXEuYm9keS5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGxldmVsLmFkZChzZXNzaW9uKV07XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgMjAxXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH0pKTtcbmFwcC5kZWxldGUoXCIvbGV2ZWxzLzpuYW1lXCIsIGF1dGhlZCwgdHJhbnNhY3Rpb24oZnVuY3Rpb24gKHJlcSwgcmVzLCBzZXNzaW9uKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBsZXZlbDtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCBMZXZlbC5maW5kT25lKHsgbmFtZTogcmVxLnBhcmFtcy5uYW1lIH0pXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBsZXZlbCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAobGV2ZWwgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IDQwNDtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQsIGxldmVsLmRlbChzZXNzaW9uKV07XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgMjAwXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH0pKTtcbmFwcC5wYXRjaChcIi9sZXZlbHMvOm5hbWVcIiwgYXV0aGVkLCB0cmFuc2FjdGlvbihmdW5jdGlvbiAocmVxLCByZXMsIHNlc3Npb24pIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxldmVsLCBsZXZlbCwgbGV2ZWw7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgaWYgKCEocmVxLmJvZHkubmV3cG9zICE9PSB1bmRlZmluZWQpKSByZXR1cm4gWzMsIDNdO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCwgTGV2ZWwuZmluZE9uZSh7IG5hbWU6IHJlcS5wYXJhbXMubmFtZSB9KV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgbGV2ZWwgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKGxldmVsID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyA0MDQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBsZXZlbC5tb3ZlKHNlc3Npb24sIHJlcS5ib2R5Lm5ld3BvcyldO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIsIDIwMF07XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgaWYgKCEocmVxLmJvZHkubmV3bmFtZSAhPT0gdW5kZWZpbmVkKSkgcmV0dXJuIFszLCA2XTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQsIExldmVsLmZpbmRPbmVBbmRVcGRhdGUoeyBuYW1lOiByZXEucGFyYW1zLm5hbWUgfSwgeyAkc2V0OiB7IG5hbWU6IHJlcS5ib2R5Lm5ld25hbWUgfSB9KS5zZXNzaW9uKHNlc3Npb24pXTtcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBsZXZlbCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAobGV2ZWwgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IDQwNDtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQsIFJlY29yZC5sZXZlbE5hbWVVcGRhdGUoc2Vzc2lvbiwgbGV2ZWwuX2lkLCByZXEuYm9keS5uZXduYW1lKV07XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgMjAwXTtcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBpZiAoIShyZXEuYm9keS5uZXdjcmVhdG9yICE9PSB1bmRlZmluZWQpKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCwgTGV2ZWwuZmluZE9uZUFuZFVwZGF0ZSh7IG5hbWU6IHJlcS5wYXJhbXMubmFtZSB9LCB7ICRzZXQ6IHsgY3JlYXRvcjogcmVxLmJvZHkubmV3Y3JlYXRvciB9IH0pLnNlc3Npb24oc2Vzc2lvbildO1xuICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIGxldmVsID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIGlmIChsZXZlbCA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgNDA0O1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgMjAwXTtcbiAgICAgICAgICAgIGNhc2UgODogdGhyb3cgNDAwO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfSkpO1xuYXBwLmdldChcIi9wbGF5ZXJzXCIsIGZ1bmN0aW9uIChyZXEsIHJlcykgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGxheWVycztcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCBQbGF5ZXIuZmluZCh7IHBvaW50czogeyAkZ3Q6IDAgfSB9KVxuICAgICAgICAgICAgICAgICAgICAuc2VsZWN0KFwibmFtZSBwb2ludHNcIilcbiAgICAgICAgICAgICAgICAgICAgLmxlYW4oKVxuICAgICAgICAgICAgICAgICAgICAuc29ydChcIi1wb2ludHNcIildO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHBsYXllcnMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyLCByZXMuc3RhdHVzKDIwMCkuanNvbihwbGF5ZXJzKV07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9KTtcbmFwcC5nZXQoXCIvcGxheWVycy86bmFtZVwiLCBmdW5jdGlvbiAocmVxLCByZXMpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBsYXllcjtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCBQbGF5ZXIuZmluZE9uZSh7IG5hbWU6IHJlcS5wYXJhbXMubmFtZSB9KVxuICAgICAgICAgICAgICAgICAgICAubGVhbigpXG4gICAgICAgICAgICAgICAgICAgIC5wb3B1bGF0ZShcInJlY29yZHNcIiwgXCJsZXZlbCBoZXJ0eiBsaW5rIGxldmVsSURcIildO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHBsYXllciA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIsIHBsYXllclxuICAgICAgICAgICAgICAgICAgICAgICAgPyByZXMuc3RhdHVzKDIwMCkuanNvbihwbGF5ZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHJlcy5zdGF0dXMoNDA0KS5zZW5kKFwiUGxheWVyIG5vdCBmb3VuZC5cIildO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfSk7XG5hcHAucG9zdChcIi9wbGF5ZXJzXCIsIGF1dGhlZCwgdHJhbnNhY3Rpb24oZnVuY3Rpb24gKHJlcSwgcmVzLCBzZXNzaW9uKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwbGF5ZXI7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgUGxheWVyLmV4aXN0cyh7IG5hbWU6IHJlcS5ib2R5Lm5hbWUgfSldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGlmIChfYS5zZW50KCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IDQwOTtcbiAgICAgICAgICAgICAgICBwbGF5ZXIgPSBuZXcgUGxheWVyKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogcmVxLmJvZHkubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzOiAwLFxuICAgICAgICAgICAgICAgICAgICBkaXNjb3JkOiByZXEuYm9keS5kaXNjb3JkID09PSBudWxsID8gdW5kZWZpbmVkIDogcmVxLmJvZHkuZGlzY29yZCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuJHNlc3Npb24oc2Vzc2lvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBwbGF5ZXIuc2F2ZSgpXTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyLCAyMDFdO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfSkpO1xuYXBwLmRlbGV0ZShcIi9wbGF5ZXJzLzpuYW1lXCIsIGF1dGhlZCwgdHJhbnNhY3Rpb24oZnVuY3Rpb24gKHJlcSwgcmVzLCBzZXNzaW9uKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwbGF5ZXI7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCwgUGxheWVyLmZpbmRPbmUoeyBuYW1lOiByZXEucGFyYW1zLm5hbWUgfSldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHBsYXllciA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAocGxheWVyID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyA0MDQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBwbGF5ZXIuYmFuKHNlc3Npb24pXTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyLCAyMDBdO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfSkpO1xuYXBwLnBhdGNoKFwiL3BsYXllcnMvOm5hbWVcIiwgYXV0aGVkLCB0cmFuc2FjdGlvbihmdW5jdGlvbiAocmVxLCByZXMsIHNlc3Npb24pIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBsYXllciwgcGxheWVyO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGlmICghKHJlcS5ib2R5Lm5ld25hbWUgIT09IHVuZGVmaW5lZCkpIHJldHVybiBbMywgM107XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBQbGF5ZXIuZmluZE9uZUFuZFVwZGF0ZSh7IG5hbWU6IHJlcS5wYXJhbXMubmFtZSB9LCB7ICRzZXQ6IHsgbmFtZTogcmVxLmJvZHkubmV3bmFtZSB9IH0pLnNlc3Npb24oc2Vzc2lvbildO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHBsYXllciA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAocGxheWVyID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyA0MDQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBSZWNvcmQucGxheWVyTmFtZVVwZGF0ZShzZXNzaW9uLCBwbGF5ZXIuX2lkLCByZXEuYm9keS5uZXduYW1lKV07XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgMjAwXTtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBpZiAoIShyZXEuYm9keS5uZXdkaXNjb3JkICE9PSB1bmRlZmluZWQpKSByZXR1cm4gWzMsIDVdO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCwgUGxheWVyLmZpbmRPbmVBbmRVcGRhdGUoeyBuYW1lOiByZXEucGFyYW1zLm5hbWUgfSwgeyAkc2V0OiB7IGRpc2NvcmQ6IHJlcS5ib2R5Lm5ld2Rpc2NvcmQgfSB9KS5zZXNzaW9uKHNlc3Npb24pXTtcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBwbGF5ZXIgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHBsYXllciA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgNDA0O1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgMjAwXTtcbiAgICAgICAgICAgIGNhc2UgNTogdGhyb3cgNDAwO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfSkpO1xuYXBwLnBvc3QoXCIvcmVjb3Jkc1wiLCBhdXRoZWQsIHRyYW5zYWN0aW9uKGZ1bmN0aW9uIChyZXEsIHJlcywgc2Vzc2lvbikgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2EsIHJlY29yZDtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0LCBQbGF5ZXIuZXhpc3RzKHsgbmFtZTogcmVxLmJvZHkucGxheWVyIH0pXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBfYSA9ICEoX2Iuc2VudCgpKTtcbiAgICAgICAgICAgICAgICBpZiAoX2EpIHJldHVybiBbMywgM107XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBMZXZlbC5leGlzdHMoeyBuYW1lOiByZXEuYm9keS5sZXZlbCB9KV07XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgX2EgPSAhKF9iLnNlbnQoKSk7XG4gICAgICAgICAgICAgICAgX2IubGFiZWwgPSAzO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGlmIChfYSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgNDA0O1xuICAgICAgICAgICAgICAgIGlmIChyZXEuYm9keS5oZXJ0eiA9PT0gdW5kZWZpbmVkIHx8IHJlcS5ib2R5LmxpbmsgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgNDAwO1xuICAgICAgICAgICAgICAgIHJlY29yZCA9IG5ldyBSZWNvcmQoe1xuICAgICAgICAgICAgICAgICAgICBwbGF5ZXI6IHJlcS5ib2R5LnBsYXllcixcbiAgICAgICAgICAgICAgICAgICAgbGV2ZWw6IHJlcS5ib2R5LmxldmVsLFxuICAgICAgICAgICAgICAgICAgICBoZXJ0ejogcmVxLmJvZHkuaGVydHosXG4gICAgICAgICAgICAgICAgICAgIGxpbms6IHJlcS5ib2R5LmxpbmssXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmVjb3JkLiRzZXNzaW9uKHNlc3Npb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCwgcmVjb3JkLnNhdmUoKV07XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiwgMjAxXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH0pKTtcbmFwcC5kZWxldGUoXCIvcmVjb3Jkc1wiLCBhdXRoZWQsIHRyYW5zYWN0aW9uKGZ1bmN0aW9uIChyZXEsIHJlcywgc2Vzc2lvbikgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVjb3JkO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGlmIChyZXEuYm9keS5wbGF5ZXIgPT09IHVuZGVmaW5lZCB8fCByZXEuYm9keS5sZXZlbCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyA0MDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBSZWNvcmQuZmluZE9uZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXI6IHJlcS5ib2R5LnBsYXllcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsOiByZXEuYm9keS5sZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJlY29yZCA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAocmVjb3JkID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyA0MDQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0LCByZWNvcmQuY2FzY2FkaW5nRGVsZXRlKHNlc3Npb24sIDEpXTtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyLCAyMDBdO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfSkpO1xudHJ5IHtcbiAgICBtb25nb29zZS5jb25uZWN0KHByb2Nlc3MuZW52Lk1PTkdPREJfVEVTVF9VUkkpO1xufVxuY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnJvcik7XG59XG5hcHAubGlzdGVuKHBvcnQsIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zb2xlLmxvZyhcIkFwcCBsaXN0ZW5pbmcgYXQgaHR0cDovL2xvY2FsaG9zdDpcIi5jb25jYXQocG9ydCkpO1xufSk7XG4iXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZSIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImV4cG9ydHMiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJyZXF1aXJlIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwidCIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJTeW1ib2wiLCJpdGVyYXRvciIsInRoaXMiLCJuIiwidiIsIm9wIiwiVHlwZUVycm9yIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsInJlY29yZFNjaGVtYSIsIlNjaGVtYSIsInBsYXllciIsInR5cGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsImxldmVsIiwiaGVydHoiLCJOdW1iZXIiLCJsaW5rIiwicGxheWVySUQiLCJyZWYiLCJsZXZlbElEIiwic3RhdGljcyIsInBsYXllck5hbWVVcGRhdGUiLCJzZXNzaW9uIiwiaWQiLCJuZXduYW1lIiwiX2EiLCJ1cGRhdGVNYW55IiwiJHNldCIsImxldmVsTmFtZVVwZGF0ZSIsIm1ldGhvZHMiLCJjYXNjYWRpbmdEZWxldGUiLCJqdXN0T25lIiwiTGV2ZWwiLCJmaW5kQnlJZEFuZFVwZGF0ZSIsIiRwdWxsIiwicmVjb3JkcyIsIl9pZCIsIlBsYXllciIsIiRpbmMiLCJwb2ludHMiLCJkZWxldGVPbmUiLCJwcmUiLCIkc2Vzc2lvbiIsImZpbmRPbmVBbmRVcGRhdGUiLCJuYW1lIiwiJGFkZFRvU2V0IiwibmV3IiwiRXJyb3IiLCJsZXZlbFNjaGVtYSIsImNyZWF0b3IiLCJwb3NpdGlvbiIsIm1pbmltaXplIiwidG9KU09OIiwidmlydHVhbHMiLCJ0b09iamVjdCIsImxldmVsUG9pbnRzIiwiZmluZCIsIiRsdGUiLCJtYXAiLCJsIiwiYWRkIiwiJGd0ZSIsInNhdmUiLCJkZWwiLCJscCIsIiRndCIsInBvcHVsYXRlIiwiZm9yRWFjaCIsInIiLCJ1cGRhdGVBbGxQb2ludHMiLCJtb3ZlIiwicG9zIiwiJGFuZCIsIiRsdCIsInBsYXllclNjaGVtYSIsImRlZmF1bHQiLCJkaXNjb3JkIiwicnJzIiwiX2kiLCJfYiIsImRlcG9wdWxhdGUiLCJjbGFzcyIsIl90aGlzIiwiY2xhc3NlcyIsImMiLCJwbGF5ZXJzIiwiX2xvb3BfMSIsInBsYXllcnNfMSIsInAiLCJsZXZlbElEcyIsImdldENvbXBsZXRlZExldmVscyIsImxldmVscyIsImZpbHRlciIsImluY2x1ZGVzIiwicmVkdWNlIiwiYiIsImZpbmRCeUlkIiwidXBkYXRlUG9pbnRzIiwiYmFuIiwiUmVjb3JkIiwibW9kZWwiLCJhcHAiLCJwb3J0IiwicHJvY2VzcyIsImVudiIsIlBPUlQiLCJzZXQiLCJ1c2UiLCJleHRlbmRlZCIsIl9fZGlybmFtZSIsImF1dGhlZCIsInJlcSIsInJlcyIsImhlYWRlcnMiLCJhdXRoIiwiQk9UX1RPS0VOIiwic2VuZFN0YXR1cyIsInRyYW5zYWN0aW9uIiwiZm4iLCJjb2RlXzEiLCJfYyIsInN0YXJ0VHJhbnNhY3Rpb24iLCJjb21taXRUcmFuc2FjdGlvbiIsImFib3J0VHJhbnNhY3Rpb24iLCJlbmRTZXNzaW9uIiwibGVhbiIsInNvcnQiLCJzdGF0dXMiLCJqc29uIiwiZmluZE9uZSIsInBhcmFtcyIsInBvc3QiLCJleGlzdHMiLCJkZWxldGUiLCJwYXRjaCIsInVuZGVmaW5lZCIsIm5ld3BvcyIsIm5ld2NyZWF0b3IiLCJzZWxlY3QiLCJzZW5kIiwibmV3ZGlzY29yZCIsInJlY29yZCIsIk1PTkdPREJfVEVTVF9VUkkiLCJlcnJvciIsImNvbnNvbGUiLCJsaXN0ZW4iLCJsb2ciLCJjb25jYXQiXSwic291cmNlUm9vdCI6IiJ9